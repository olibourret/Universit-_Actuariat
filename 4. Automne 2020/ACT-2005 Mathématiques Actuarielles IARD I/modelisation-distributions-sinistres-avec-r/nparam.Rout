
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> options(error=expression(NULL))
> ### Emacs: -*- coding: utf-8; fill-column: 65; comment-column: 30; -*-
> ##
> ## Copyright (C) 2018 Vincent Goulet
> ##
> ## Ce fichier fait partie du projet
> ## «Modélisation des distributions de sinistres avec R»
> ## https://gitlab.com/vigou3/modelisation-distributions-sinistres-avec-r
> ##
> ## Cette création est mise à disposition selon le contrat
> ## Attribution-Partage dans les mêmes conditions 4.0
> ## International de Creative Commons.
> ## https://creativecommons.org/licenses/by-sa/4.0/
> 
> ###
> ### FONCTIONS DE RÉPARTITION ET DE PROBABILITÉ EMPIRIQUES
> ###
> 
> ## DONNÉES INDIVIDUELLES
> 
> ## On va travailler avec les données "dental" fournies dans la
> ## première édition de Loss Models. Il s'agit de 10 montants de
> ## réclamation en assurance dentaire avec une franchise de 50.
> ## Ces données sont distribuées avec actuar.
> data(dental, package = "actuar") # charger les données
> dental                           # les données
 [1]  141   16   46   40  351  259  317 1511  107  567
> 
> ## Fonction de répartition empirique. La fonction 'ecdf' de R
> ## retourne une fonction pour calculer la fonction de répartition
> ## empirique en un point quelconque. Les fonctions génériques
> ## 'summary', 'knots' et 'plot' comportent des méthodes pour les
> ## objets de classe "ecdf". La rubrique d'aide de 'ecdf' contient
> ## plusieurs exemples.
> (Fn <- ecdf(dental))          # définition de la f.r. empirique
Empirical CDF 
Call: ecdf(dental)
 x[1:10] =     16,     40,     46,  ...,    567,   1511
> summary(Fn)                   # sommaire (peu utile)
Empirical CDF:	  10 unique values with summary
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  16.00   61.25  200.00  335.50  342.50 1511.00 
> knots(Fn)                     # les noeuds de la fonction
 [1]   16   40   46  107  141  259  317  351  567 1511
> Fn(knots(Fn))                 # évaluation aux noeuds
 [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
> Fn(c(20, 150, 1000))          # évaluation en d'autres points
[1] 0.1 0.5 0.9
> 
> ## Graphiques de la fonction de répartition empirique, du plus
> ## simple à des plus élaborés.
> plot(Fn)
> plot(Fn, verticals = TRUE)
> plot(Fn, verticals = TRUE, do.points = FALSE)
> 
> plot(Fn, verticals = TRUE,
+      col.h = "blue", col.p = "red", col.v = "bisque",
+      pch = 20)
> abline(v = knots(Fn), lty = 2, col = "gray90")
> abline(h = Fn(knots(Fn)), lty = 2, col = "gray90")
> 
> plot(Fn, col.h = "blue", col.p = "red", pch = 18)
> segments(knots(Fn), 0, knots(Fn), Fn(knots(Fn)), col = "gray90")
> 
> ## Fonction de probabilité empirique: utiliser la fonction
> ## 'table' pour déterminer la fréquence de chaque valeur dans
> ## l'échantillon.
> table(dental)
dental
  16   40   46  107  141  259  317  351  567 1511 
   1    1    1    1    1    1    1    1    1    1 
> (fn <- table(dental)/length(dental))
dental
  16   40   46  107  141  259  317  351  567 1511 
 0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1 
> plot(dental, fn, type = "h")
> 
> ## On peut aussi calculer et tracer un histogramme pour des
> ## données individuelles avec la fonction 'hist'. Spécifier
> ## l'option 'prob = TRUE' pour graduer l'axe des ordonnées en
> ## probabilités plutôt qu'en fréquences. Les classes sont
> ## déterminées automatiquement, mais peuvent être changées avec
> ## l'option 'breaks'.
> hist(dental)                       # histogramme par défaut
> hist(dental, plot = FALSE)$counts  # fréquence par classe
[1] 8 1 0 1
> hist(dental, plot = FALSE)$density # fréq. relative par classe
[1] 0.0016 0.0002 0.0000 0.0002
> hist(dental,
+      breaks = c(0, 25, 100, 500, 1000, 2000)) # autres classes
> 
> ## DONNÉES GROUPÉES
> 
> ## On va utiliser les données "grouped dental" de Loss Models qui
> ## sont distribuées avec actuar.
> library(actuar)               # charger le package

Attachement du package : ‘actuar’

The following object is masked _by_ ‘.GlobalEnv’:

    gdental

The following object is masked from ‘package:grDevices’:

    cm

> data(gdental)                 # charger les données
> gdental                       # les données
             cj nj
1      (0,  25] 30
2    ( 25,  50] 31
3    ( 50, 100] 57
4    (100, 150] 42
5    (150, 250] 65
6    (250, 500] 84
7   (500, 1000] 45
8  (1000, 1500] 10
9  (1500, 2500] 11
10 (2500, 4000]  3
> 
> ## La fonction 'ogive' de actuar est l'analogue de 'ecdf' pour
> ## les données groupées.
> (Gn <- ogive(gdental))        # définition
Ogive for grouped data 
Call: ogive(x = gdental)
    x =      0,     25,     50,  ...,   2500,   4000
 F(x) =      0, 0.079365, 0.16138,  ..., 0.99206,      1
> summary(Gn)                   # sommaire
Ogive:	  11 unique values with summary
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
   0.0000   75.0000  250.0000  915.9091 1250.0000 4000.0000 
> knots(Gn)                     # les bornes
 [1]    0   25   50  100  150  250  500 1000 1500 2500 4000
> Gn(knots(Gn))                 # évaluation aux bornes
 [1] 0.00000000 0.07936508 0.16137566 0.31216931 0.42328042 0.59523810
 [7] 0.81746032 0.93650794 0.96296296 0.99206349 1.00000000
> Gn(c(20, 150, 1000))          # évaluation en d'autres points
[1] 0.06349206 0.42328042 0.93650794
> plot(Gn)                      # graphique
> 
> ## Pour l'histogramme de données groupées, le package définit une
> ## méthode de 'hist' pour les objets de classe 'grouped.data'.
> hist(gdental)                 # aussi simple que cela
> 
> ###
> ### ESTIMATEURS DE LA FONCTION DE SURVIE
> ###
> 
> ## ESTIMATEUR DE KAPLAN-MEIER
> 
> ## On peut calculer l'estimateur de Kaplan-Meier dans R avec les
> ## fonctions 'Surv' et 'survfit' du package d'analyse de survie
> ## survival. Celui-ci est distribué avec R.
> library(survival)
> 
> ## La principale fonction d'estimation de la fonction de survie
> ## est 'survfit'. Celle-ci requiert des données sous forme
> ## d'objet de type 'Surv', créé avec la fonction du même nom.
> ##
> ## Pour nos besoins, il suffit de connaître les trois premiers
> ## arguments de 'Surv'. Il s'agit, dans l'ordre, de:
> ##
> ##   time: vecteur des points de troncature d_j (j = 1, ..., n)
> ##         si les données sont tronquées et censurées, ou valeur
> ##         de l'argument 'time2' si les données ne sont que
> ##         censurées;
> ##   time2: vecteur des observations x_j et des données
> ##          censurées u_j (j = 1, ..., n);
> ##   event: vecteur indiquant si la donnée j (j = 1, ..., n) est
> ##          une observation x_j (1, "décès") ou une donnée
> ##          censurée u_i (0, "vivant").
> ##
> ## On définit un objet contenant les données D2 de Loss Models.
> d <- c(rep(0, 30), 0.3, 0.7, 1.0, 1.8, 2.1,
+                    2.9, 2.9, 3.2, 3.4, 3.9)
> x <- c(0.1, 0.5, 0.8, 0.8, 1.8, 1.8, 2.1, 2.5, 2.8, 2.9, 2.9,
+        3.9, 4.0, 4.0, 4.1, 4.8, 4.8, 4.8, rep(5.0, 12), 5.0, 5.0,
+        4.1, 3.1, 3.9, 5.0, 4.8, 4.0, 5.0, 5.0)
> e <- rep(0, 40); e[c(4, 10, 11, 13, 16, 33, 34, 38)] <- 1
> Surv(d, x, e)                 # objet contenant les données
 [1] (0.0,0.1+] (0.0,0.5+] (0.0,0.8+] (0.0,0.8]  (0.0,1.8+] (0.0,1.8+]
 [7] (0.0,2.1+] (0.0,2.5+] (0.0,2.8+] (0.0,2.9]  (0.0,2.9]  (0.0,3.9+]
[13] (0.0,4.0]  (0.0,4.0+] (0.0,4.1+] (0.0,4.8]  (0.0,4.8+] (0.0,4.8+]
[19] (0.0,5.0+] (0.0,5.0+] (0.0,5.0+] (0.0,5.0+] (0.0,5.0+] (0.0,5.0+]
[25] (0.0,5.0+] (0.0,5.0+] (0.0,5.0+] (0.0,5.0+] (0.0,5.0+] (0.0,5.0+]
[31] (0.3,5.0+] (0.7,5.0+] (1.0,4.1]  (1.8,3.1]  (2.1,3.9+] (2.9,5.0+]
[37] (2.9,4.8+] (3.2,4.0]  (3.4,5.0+] (3.9,5.0+]
> 
> ## La fonction d'estimation de la fonction de survie est
> ## 'survfit'. Le premier argument de la fonction est une formule
> ## dont le côté gauche est un objet de classe 'Surv' contenant
> ## les données et créé avec la fonction du même nom. Dans notre
> ## contexte, le côté droit de la formule est simplement 1. Par
> ## défaut, la fonction ajuste les données avec l'estimateur de
> ## Kaplan-Meier.
> (fit <- survfit(Surv(d, x, e) ~ 1)) # ajustement du modèle
Call: survfit(formula = Surv(d, x, e) ~ 1)

records   n.max n.start  events  median 0.95LCL 0.95UCL 
     40      30       0       8      NA      NA      NA 
> (sfit <- summary(fit))              # fonction de survie estimée
Call: survfit(formula = Surv(d, x, e) ~ 1)

 time n.risk n.event censored survival std.err lower 95% CI upper 95% CI
  0.8     30       1        3    0.967  0.0328        0.905        1.000
  2.9     26       2        5    0.892  0.0589        0.784        1.000
  3.1     26       1        0    0.858  0.0659        0.738        0.997
  4.0     26       2        3    0.792  0.0755        0.657        0.955
  4.1     23       1        1    0.758  0.0797        0.616        0.931
  4.8     21       1        3    0.721  0.0837        0.575        0.906
> plot(fit)                           # graphique de S_n(t)
> 
> ## L'objet 'sfit' défini ci-dessus est une liste comportant,
> ## entre autres, les éléments suivants:
> ##
> ##   surv: valeurs de S_n(y_j), j = 1, ..., k;
> ##   time: valeurs de y_j;
> ##   n.risk: valeurs de r_j;
> ##   n.event: valeurs de s_j;
> ##   std.err: approximations de Greenwood de Var[S_n(y_j)].
> ##
> ## Comparons les valeurs de l'élément 'std.err' avec le calcul
> ## fait à partir de la formule présentée à la section 3.2.3.
> ## [Remarque: la fonction 'with' ci-dessous permet de faire des
> ## calculs "à l'intérieur" d'une liste ou d'un data frame,
> ## c'est-à-dire en utilisant directement les noms des éléments de
> ## la liste. Ainsi, si une liste 'x' contient les éléments 'a' et
> ## 'b', 'with(x, a + b)' est équivalent à 'x$a + x$b'.]
> sfit$std.err^2                # valeurs obtenues avec 'survfit'
[1] 0.001074074 0.003467152 0.004338106 0.005706780 0.006355495 0.007003989
> with(sfit,                    # calcul manuel
+      surv^2 * cumsum(n.event/(n.risk * (n.risk - n.event))))
[1] 0.001074074 0.003467152 0.004338106 0.005706780 0.006355495 0.007003989
> 
> ## Il est laissé en exercice de reproduire les résultats de
> ## l'exemple 3.4 avec 'survfit'.
> 
> ## ESTIMATEUR DE NELSON-AALEN
> 
> ## On peut aussi calculer l'estimateur de Nelson-Aalen dans R
> ## avec les fonctions 'Surv' et 'survfit' du package survival.
> library(survival)             # chargé précédemment
> 
> ## Nous supposons que les données sont complètes. Il suffit dans
> ## ce cas de passer le vecteur des observations à 'Surv'.
> x <- c(0.8, 2.9, 2.9, 3.1, 4.0, 4.0, 4.1, 4.8) # données brutes
> Surv(x)                                        # données "de survie"
[1] 0.8 2.9 2.9 3.1 4.0 4.0 4.1 4.8
> 
> ## On calcule ensuite l'estimateur de la fonction de survie par
> ## la méthode de Nelson-Aalen avec la fonction 'survfit'. Pour ce
> ## faire, il faut spécifier le type d'estimation
> ## "fleming-harrington".
> fit <- survfit(Surv(x) ~ 1, type = "fl") # ajustement du modèle
> summary(fit)                  # fonction de survie estimée
Call: survfit(formula = Surv(x) ~ 1, type = "fl")

 time n.risk n.event survival std.err lower 95% CI upper 95% CI
  0.8      8       1   0.8825   0.118       0.6792            1
  2.9      7       2   0.6632   0.182       0.3877            1
  3.1      5       1   0.5430   0.192       0.2715            1
  4.0      4       2   0.3293   0.202       0.0992            1
  4.1      2       1   0.1997   0.187       0.0319            1
  4.8      1       1   0.0735     Inf          NaN            1
> plot(fit)                     # graphique de S(x) estimée
> plot(fit, fun = "cumhaz")     # graphique de H(x) estimée
> 
> 
> ###
> ### ESTIMATION PAR NOYAUX
> ###
> 
> ## On va comparer l'histogramme et divers estimateurs par noyaux
> ## du jeu de données suivant.
> x <- c(10, 25, 40, 50, 100, 205, 208, 250, 768, 1045, 1067,
+        1104, 1590, 1780, 1967, 1987, 2000, 2000, 2560, 2789,
+        5067, 5896, 5890, 6980, 7000)
> 
> ## Histogramme. On le sauvegarde dans un objet 'h' pour pouvoir
> ## le réutiliser plusieurs fois.
> h <- hist(x, breaks = c(0, 500, 1500, 2500, 3000, 6000, 7000))
> 
> ## La fonction 'density' de R calcule l'estimateur par noyaux
> ## d'un jeu de données. La fonction supporte tous les noyaux
> ## présentés dans la section 3.3 sauf le noyau gamma, ainsi que
> ## quelques autres. Outre un vecteur de données, la fonction a
> ## deux arguments principaux:
> ##
> ##    bw: la largeur de bande;
> ##    kernel: le type de noyau à utiliser ("gaussian",
> ##            "epanechnikov", "rectangular", "triangular", ...).
> ##
> ## La paramétrisation des noyaux dans R est légèrement différente
> ## de celle des notes: l'écart type du noyau est toujours égal à
> ## la largeur de bande. L'argument 'bw' ne correspond donc pas
> ## tout à fait à notre paramètre b, sauf dans le cas du noyau
> ## gaussien. La largeur de bande par défaut est calculée par la
> ## fonction 'bw.nrd0'.
> bw.nrd0(x)                    # largeur de bande par défaut
[1] 829.826
> R <- diff(quantile(x, c(0.25, 0.75)))   # espace interquartile
> 0.9 * min(sd(x), R/1.34)/length(x)^0.2  # vérification
[1] 829.826
> (fg <- density(x, kernel = "gaussian")) # noyau gaussien

Call:
	density.default(x = x, kernel = "gaussian")

Data: x (25 obs.);	Bandwidth 'bw' = 829.8

       x                 y            
 Min.   :-2479.5   Min.   :4.202e-07  
 1st Qu.:  512.8   1st Qu.:2.673e-05  
 Median : 3505.0   Median :5.682e-05  
 Mean   : 3505.0   Mean   :8.343e-05  
 3rd Qu.: 6497.2   3rd Qu.:1.394e-04  
 Max.   : 9489.5   Max.   :2.354e-04  
> plot(fg)                                # graphique
> 
> ## Séparation du périphérique graphique en quatre parties (deux
> ## lignes et deux colonnes) pour accueillir autant de graphiques.
> ## La fonction 'par' sert à régler les multiples paramètres
> ## graphiques. La fonction retourne les paramètres précédents,
> ## que l'on sauvegarde pour les rétablir plus tard.
> op <- par(mfrow = c(2, 2))
> 
> ## Comparaison de plusieurs noyaux avec la largeur de bande par
> ## défaut.
> plot(h)
> lines(density(x, kernel = "r"), col = "red") # uniforme
> plot(h)
> lines(density(x, kernel = "t"), col = "red") # triangulaire
> plot(h)
> lines(density(x, kernel = "e"), col = "red") # Epanechnikov
> plot(h)
> lines(density(x, kernel = "g"), col = "red") # gaussien
> 
> ## Plus que le type de noyau, c'est surtout la largeur de bande
> ## qui a un impact sur l'estimateur. Plus la bande est large et
> ## plus l'estimateur est lisse puisque les noyaux se chevauchent
> ## davantage.
> plot(density(x, kernel = "r", adjust = 0.25)) # 25 % du défaut
> plot(density(x, kernel = "r", adjust = 0.50)) # 50 % du défaut
> plot(density(x, kernel = "r", adjust = 1.25)) # 125 % du défaut
> plot(density(x, kernel = "r", adjust = 1.50)) # 150 % du défaut
> 
> ## Même exercice, mais avec le noyau d'Epanechnikov.
> plot(density(x, kernel = "e", adjust = 0.25)) # 25 % du défaut
> plot(density(x, kernel = "e", adjust = 0.50)) # 50 % du défaut
> plot(density(x, kernel = "e", adjust = 1.25)) # 125 % du défaut
> plot(density(x, kernel = "e", adjust = 1.50)) # 150 % du défaut
> 
> ## Rétablir les anciens paramètres graphiques.
> par(op)
> 
> ###
> ### STATISTIQUES DESCRIPTIVES EMPIRIQUES
> ###
> 
> ## On va illustrer avec les données 'dental' et 'gdental' les
> ## différentes fonctions disponibles dans R et dans actuar pour
> ## calculer les statistiques descriptives empiriques.
> library(actuar)
> data(dental)
> data(gdental)
> 
> ## SOMMAIRE DE DONNÉES INDIVIDUELLES
> 
> ## La fonction 'summary' fournit rapidement et simplement les
> ## minimum, maximum, médiane, 2e et 3e quartiles ainsi que la
> ## moyenne de données individuelles.
> summary(dental)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  16.00   61.25  200.00  335.50  342.50 1511.00 
> 
> ## MOMENTS
> 
> ## On a des fonctions pour accéder aux moments empiriques les
> ## plus usuels.
> mean(dental)                    # moyenne
[1] 335.5
> var(dental)                     # variance (sans biais)
[1] 200564.5
> sd(dental)                      # écart type
[1] 447.8443
> 
> ## actuar fournit également une méthode de 'mean' pour les
> ## données groupées.
> mean(gdental)
      nj 
353.3399 
> 
> ## Plus généralement, la fonction 'emm' de actuar permet de
> ## calculer n'importe quel moment (non centré) et ce, pour des
> ## données individuelles ou groupées.
> (mu <- emm(dental))              # moyenne
[1] 335.5
> emm(dental, 2) - emm(dental)^2   # variance (biaisée)
[1] 180508
> emm(dental - mu, 3)/sd(dental)^3 # asymétrie
[1] 1.708155
> emm(gdental, 2) - emm(gdental)^2 # variance données groupées
      nj 
232831.1 
> 
> ## ESPÉRANCE LIMITÉE
> 
> ## actuar fournit la fonction 'elev' pour calculer la fonction
> ## d'espérance limitée empirique en n'importe quelle limite
> ## (données individuelles et groupées). Le fonctionnement est
> ## similaire à 'ecdf' et 'ogive'.
> (lev <- elev(dental))         # définition
Empirical LEV 
Call: elev(x = dental)
 x[1:10] =     16,     40,     46,  ...,    567,   1511
> lev(knots(lev))               # calcul en chacun des points
 [1]  16.0  37.6  42.4  85.1 105.5 164.5 187.7 197.9 241.1 335.5
> lev(1200)                     # calcul en un point quelconque
[1] 304.4
> mean(pmin(dental, 1200))      # vérification
[1] 304.4
> plot(lev)                     # graphique
> 
> ## Pour illustrer avec des données groupées, on vérifie le
> ## résultat de l'exemple 3.10.
> x <- grouped.data(cj = c(0, 100, 200, 500), nj = c(5, 10, 2))
> elev(x)(120)                  # = 1670/17
[1] 98.23529
> 
> ## QUANTILES
> 
> ## La fonction 'quantile' de R calcule les quantiles empiriques
> ## pour des données individuelles selon l'un de sept (!)
> ## algorithmes différents. Sans autre argument, la fonction
> ## retourne les quartiles de l'échantillon selon l'algorithme 7
> ## présenté dans les remarques de la section 3.4.4. L'algorithme
> ## de Loss Models est le numéro 6.
> quantile(dental)                # utilisation simple
     0%     25%     50%     75%    100% 
  16.00   61.25  200.00  342.50 1511.00 
> quantile(dental, c(0.45, 0.80)) # autres quantiles
  45%   80% 
146.9 394.2 
> y <- sort(dental)               # statistiques d'ordre
> 0.3 * y[3] + 0.7 * y[4]         # algorithme de R
[1] 88.7
> quantile(dental, 0.30)          # vérification
 30% 
88.7 
> 0.7 * y[3] + 0.3 * y[4]         # notre algorithme
[1] 64.3
> quantile(dental, 0.3, type = 6) # numéro 6
 30% 
64.3 
> 
> ## Pour des données groupées, la méthode de 'quantile' définie
> ## par actuar retourne simplement l'inverse de l'ogive.
> quantile(gdental)                 # utilisation simple
        0%        25%        50%        75%       100% 
   0.00000   79.38596  194.61538  424.10714 4000.00000 
> quantile(gdental, c(0.45, 0.80))  # autres quantiles
     45%      80% 
165.5385 480.3571 
> ogive(gdental)(quantile(gdental)) # inverse de l'ogive
[1] 0.00 0.25 0.50 0.75 1.00
> 
