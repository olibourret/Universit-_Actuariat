
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> options(error=expression(NULL))
> ### Emacs: -*- coding: utf-8; fill-column: 62; comment-column: 27; -*-
> ##
> ## Copyright (C) 2018 Vincent Goulet
> ##
> ## Ce fichier fait partie du projet
> ## "Méthodes numériques en actuariat avec R"
> ## https://gitlab.com/vigou3/methodes-numeriques-en-actuariat
> ##
> ## Cette création est mise à disposition sous licence
> ## Attribution-Partage dans les mêmes conditions 4.0
> ## International de Creative Commons.
> ## https://creativecommons.org/licenses/by-sa/4.0/
> 
> ###
> ### MÉTHODE DE L'INVERSE   
> ###
> 
> ## Simulation d'un échantillon aléatoire d'une distribution
> ## exponentielle par la méthode de l'inverse.
> lambda <- 5
> x <- -log(runif(1000))/lambda
> 
> ## Pour faire une petite vérification, nous allons tracer
> ## l'histogramme de l'échantillon et y superposer la véritable
> ## densité d'une exponentielle de paramètre lambda. Les deux
> ## graphiques devraient concorder.
> 
> ## Tracé de l'histogramme. Il faut spécifier l'option 'prob =
> ## TRUE' pour que l'axe des ordonnées soit gradué en
> ## probabilités plutôt qu'en nombre de données. Sinon, le
> ## graphique de la densité que nous allons ajouter dans un
> ## moment n'apparaîtra pas sur le graphique.
> hist(x, prob = TRUE) # histogramme gradué en probabilités
> 
> ## Ajoutons maintenant la densité à l'aide de la très utile
> ## fonction 'curve' qui permet de tracer une fonction f(x)
> ## quelconque. Avec l'option 'add = TRUE', le graphique est
> ## ajouté au graphique existant.
> curve(dexp(x, rate = lambda), add = TRUE)
> 
> ###
> ### MÉTHODE ACCEPTATION-REJET  
> ###
> 
> ## Nous effectuons une mise en oeuvre de l'algorithme
> ## d'acceptation-rejet pour simuler des observations d'une
> ## distribution Bêta(3, 2). La procédure est intrinsèquement
> ## itérative, alors nous devons utiliser une boucle. Il y a
> ## diverses manières de faire, j'ai ici utilisé une boucle
> ## 'repeat'; une autre mise en oeuvre est présentée dans les
> ## exercices.
> ##
> ## Remarquez que le vecteur contenant les résultats est
> ## initialisé au début de la fonction pour éviter le Syndrôme
> ## de la plaque à biscuits expliqué au chapitre 6 de
> ## Goulet, V. «Programmer avec R», 2017.
> rbeta.ar <- function(n)
+ {
+     x <- numeric(n)        # initialisation du contenant
+     g <- function(x)       # fonction enveloppante
+         ifelse(x < 0.8, 2.5 * x, 10 - 10 * x)
+     Ginv <- function(x)    # l'inverse de son intégrale
+         ifelse(x < 0.8, sqrt(0.8 * x), 1 - sqrt(0.2 - 0.2 * x))
+ 
+     i <- 0                 # initialisation du compteur
+     repeat
+     {
+         y <- Ginv(runif(1))
+         if (1.2 * g(y) * runif(1) <= dbeta(y, 3, 2))
+             x[i <- i + 1] <- y # assignation et incrément
+         if (i > n)
+             break          # sortir de la boucle repeat
+     }
+     x                      # retourner x
+ }
> 
> ## Vérification empirique pour voir si ça marche.
> x <- rbeta.ar(1000)
> hist(x, prob = TRUE)
> curve(dbeta(x, 3, 2), add = TRUE)
> 
> ###
> ### FONCTIONS DE SIMULATION DANS R  
> ###
> 
> ## La fonction de base pour simuler des nombres uniformes est
> ## 'runif'.
> runif(10)                  # sur (0, 1) par défaut
 [1] 0.7130311 0.9135573 0.6308039 0.7175967 0.2295160 0.4526039 0.7606307
 [8] 0.8971381 0.2438174 0.5605542
> runif(10, 2, 5)            # sur un autre intervalle
 [1] 2.873222 2.845861 4.247298 4.151094 4.959991 4.311427 3.394961 3.114547
 [9] 2.681914 3.638694
> 2 + 3 * runif(10)          # équivalent, moins lisible
 [1] 4.239217 3.194251 2.266946 2.952825 3.099532 2.090402 3.867419 4.216646
 [9] 4.370243 2.504506
> 
> ## R est livré avec plusieurs générateurs de nombres
> ## aléatoires. Nous pouvons en changer avec la fonction
> ## 'RNGkind'.
> RNGkind("Wichmann-Hill")   # générateur de Excel
> runif(10)                  # rien de particulier à voir
 [1] 0.9300215 0.2494331 0.6324435 0.3551810 0.6080723 0.7872889 0.7351788
 [8] 0.3682257 0.6793301 0.6280944
> RNGkind("default")         # retour au générateur par défaut
> 
> ## La fonction 'set.seed' est très utile pour spécifier
> ## l'amorce d'un générateur. Si deux simulations sont
> ## effectuées avec la même amorce, nous obtiendrons exactement
> ## les mêmes nombres aléatoires et, donc, les mêmes résultats.
> ## Très utile pour répéter une simulation à l'identique.
> set.seed(1)                # valeur sans importance
> runif(5)                   # 5 nombres aléatoires
[1] 0.2655087 0.3721239 0.5728534 0.9082078 0.2016819
> runif(5)                   # 5 autres nombres
[1] 0.89838968 0.94467527 0.66079779 0.62911404 0.06178627
> set.seed(1)                # réinitialisation de l'amorce
> runif(5)                   # les mêmes 5 nombres que ci-dessus
[1] 0.2655087 0.3721239 0.5728534 0.9082078 0.2016819
> 
> ## Plutôt que de devoir utiliser la méthode de l'inverse ou un
> ## autre algorithme de simulation pour obtenir des nombres
> ## aléatoires d'une loi de probabilité non uniforme, R fournit
> ## des fonctions de simulation pour bon nombre de lois. Toutes
> ## ces fonctions sont vectorielles. Ci-dessous, P == Poisson
> ## et G == Gamma pour économiser sur la notation.
> n <- 10                    # taille des échantillons
> rbinom(n, 5, 0.3)          # Binomiale(5, 0,3)
 [1] 3 3 2 2 0 1 1 2 1 2
> rbinom(n, 1, 0.3)          # Bernoulli(0,3)
 [1] 0 1 1 0 1 1 0 0 0 0
> rnorm(n)                   # Normale(0, 1)
 [1] -0.2894616 -0.2992151 -0.4115108  0.2522234 -0.8919211  0.4356833
 [7] -1.2375384 -0.2242679  0.3773956  0.1333364
> rnorm(n, 2, 5)             # Normale(2, 25)
 [1]  6.0209475  1.7144661  4.5180399  7.4288468 -1.4547692 -4.4229968
 [7]  2.2336309  0.8214672 -0.7144413 -0.1665516
> rpois(n, c(2, 5))          # P(2), P(5), P(2), ..., P(5)
 [1] 1 5 3 2 4 4 3 4 1 5
> rgamma(n, 3, 2:11)         # G(3, 2), G(3, 3), ..., G(3, 11)
 [1] 2.42063998 0.69260778 0.56165809 0.36706780 0.57627171 0.21851110
 [7] 0.07984963 0.42920200 0.23255205 0.26713704
> rgamma(n, 11:2, 2:11)      # G(11, 2), G(10, 3), ..., G(2, 11)
 [1] 4.6574100 3.5268307 1.3815586 1.6401366 1.3619623 0.7289445 0.7237129
 [8] 0.3613218 0.2482566 0.2239718
> 
> ## La fonction 'sample' sert pour simuler d'une distribution
> ## discrète quelconque. Le premier argument est le support de
> ## la distribution et le second, la taille de l'échantillon
> ## désirée. Par défaut, l'échantillonnage se fait sans remise
> ## et avec des probabilités égales sur tout le support.
> sample(1:49, 7)            # numéros pour le 7/49
[1] 26 10 11 28 49  4  2
> sample(1:10, 10)           # permutation des nombres de 1 à 10
 [1]  7  9  5  4 10  8  3  6  2  1
> sample(1:10)               # idem, plus simple
 [1]  3  7  4  2  5  1  8  9 10  6
> sample(10)                 # idem, encore plus simple!
 [1]  5 10  2  4  1  8  6  7  9  3
> 
> ## Échantillonnage avec remise.
> sample(1:10, 10, replace = TRUE)
 [1] 8 9 5 1 4 8 4 7 9 9
> 
> ## Distribution de probabilités non uniforme.
> x <- sample(c(0, 2, 5), 1000, replace = TRUE,
+             prob = c(0.2, 0.5, 0.3))
> table(x)                   # tableau de fréquences 
x
  0   2   5 
204 524 272 
> 
> ###
> ### MODÈLES ACTUARIELS     
> ###
> 
> ## Le paquetage actuar contient plusieurs fonctions de
> ## simulation de modèles actuariels. Nous allons fournir des
> ## exemples d'utilisation de ces fonctions dans la suite.
> library(actuar)            # charger le paquetage

Attachement du package : ‘actuar’

The following object is masked from ‘package:grDevices’:

    cm

> 
> ## MÉLANGES DISCRETS
> 
> ## La clé pour simuler facilement d'un mélange discret en R
> ## consiste à réaliser que l'ordre des observations est sans
> ## importance et, donc, que l'on peut simuler toutes les
> ## observations de la première loi, puis toutes celles de la
> ## seconde loi.
> ##
> ## Reste à déterminer le nombre d'observations qui provient de
> ## chaque loi. Pour chaque observation, la probabilité qu'elle
> ## provienne de la première loi est p. Le nombre
> ## d'observations provenant de la première loi suit donc une
> ## distribution binomiale de paramètres n et p, où n est le
> ## nombre total d'observations à simuler.
> ##
> ## Voici un exemple de simulation d'observations du mélange
> ## discret de deux lois log-normales présenté dans le
> ## chapitre. Les paramètres de la première loi sont 3,6 et
> ## 0,6; ceux de la seconde loi sont 4,5 et 0,3. Le paramètre de
> ## mélange est p = 0,55.
> n <- 10000                   # taille de l'échantillon
> n1 <- rbinom(1, n, 0.55)     # quantité provenant de la loi 1
> x <- c(rlnorm(n1, 3.6, 0.6),     # observations de la loi 1
+        rlnorm(n - n1, 4.5, 0.3)) # observations de la loi 2
> hist(x, prob = TRUE)             # histogramme
> curve(0.55 * dlnorm(x, 3.6, 0.6) +
+       0.45 * dlnorm(x, 4.5, 0.3),
+       add = TRUE, lwd = 2, col = "red3") # densité théorique
> 
> ## La fonction 'rmixture' du paquetage actuar offre une
> ## interface conviviale pour simuler des observations de
> ## mélanges discrets (avec un nombre quelconque de
> ## distributions).
> ##
> ## La fonction compte trois arguments:
> ##
> ## 'n': nombre d'observations à simuler;
> ## 'probs': vecteur de poids relatif de chaque modèle dans le
> ##          mélange (normalisé pour sommer à 1);
> ## 'models': vecteur d'expressions contenant les modèles
> ##           formant le mélange.
> ##
> ## La méthode de formulation des modèles est commune à toutes
> ## les fonctions de simulation de actuar. Il s'agit de
> ## fournir, sous forme d'expression non évaluée, des appels à
> ## des fonctions de simulation en omettant le nombre de
> ## valeurs à simuler.
> ##
> ## Pour illustrer, reprenons l'exemple ci-dessus avec
> ## 'rmixture'.
> x <- rmixture(10000, probs = c(0.55, 0.45),
+               models = expression(rlnorm(3.6, 0.6),
+                                   rlnorm(4.5, 0.3)))
> 
> ## Vérifions la validité de la fonction en superposant à
> ## l'histogramme de l'échantillon la densité théorique du
> ## mélange.
> hist(x, prob = TRUE)                     # histogramme
> curve(0.55 * dlnorm(x, 3.6, 0.6) +
+       0.45 * dlnorm(x, 4.5, 0.3),
+       add = TRUE, lwd = 2, col = "red3") # densité théorique
> 
> ## Simulation d'un mélange de deux exponentielles (de moyennes
> ## 1/3 et 1/7) avec poids égal. Le vecteur de poids est
> ## recyclé automatiquement par 'rmixture'.
> rmixture(10, 0.5, expression(rexp(3), rexp(7)))
 [1] 0.129243661 0.187833053 0.117690137 0.227369896 0.061854711 0.013694292
 [7] 0.610179244 0.014300646 0.091747148 0.009219799
> 
> ## MÉLANGES CONTINUS
> 
> ## La simulation des mélanges continus est simple à faire en R
> ## puisque les fonctions r<loi> sont vectorielles. Il suffit
> ## de simuler autant de paramètres de mélange que nous
> ## souhaitons obtenir d'observations de la distribution
> ## marginale.
> ##
> ## Reprenons ici l'exemple du texte, soit:
> ##
> ##   X|Theta = theta ~ Poisson(theta)
> ##             Theta ~ Gamma(5, 4)
> ##
> ## D'abord en deux étapes.
> theta <- rgamma(1000, 5, 4) # 1000 paramètres de mélange...
> x <- rpois(1000, theta)     # ... pour 1000 lois de Poisson
> 
> ## Nous pouvons écrire le tout en une seule expression.
> x <- rpois(1000, rgamma(1000, 5, 4))
> 
> ## On peut démontrer (faites-le en exercice!) que la
> ## distribution non conditionnelle de X est une binomiale
> ## négative de paramètres 5 et 4/(4 + 1) = 0,8.
> ##
> ## Vérifions ce résultat empiriquement en calculant d'abord le
> ## tableau de fréquences des observations de l'échantillon
> ## avec la fonction 'table', puis en traçant le graphique des
> ## résultats. Il existe une méthode de 'plot' pour les
> ## tableaux de fréquences.
> (p <- table(x))            # tableau de fréquences
x
  0   1   2   3   4   5   6   7   8 
314 315 206  93  44  19   6   2   1 
> plot(p/length(x))          # graphique (fréquences relatives)
> 
> ## Ajoutons au graphique les masses de probabilités
> ## théoriques.
> (xu <- unique(x))          # valeurs distinctes de x
[1] 0 2 1 5 3 6 4 7 8
> points(xu, dnbinom(xu, 5, 0.8), pch = 21, bg = "red3")
> 
> ## DISTRIBUTIONS COMPOSÉES 
> 
> ## La simulation des distributions composées S = X_1 + ... +
> ## X_N est une procédure intrinsèquement itérative puisque
> ## pour chaque observation de la variable aléatoire S, il faut
> ## d'abord connaitre le nombre d'observations à simuler de la
> ## variable aléatoire X, nombre obtenu de la distribution de
> ## la variable aléatoire N.
> ##
> ## Nous présentons deux techniques «manuelles» avant
> ## d'illustrer les fonctions 'rcomppois' et 'rcompound' du
> ## paquetage actuar.
> ##
> ## Considérons le cas d'une Poisson composée. Le paramètre de
> ## Poisson vaut 2 et la distribution de la variable aléatoire
> ## X est une Gamma(2, 1).
> ##
> ## Une première approche repose sur la fonction 'sapply'. Elle
> ## applique pour chaque observation de la loi de Poisson une
> ## fonction anonyme qui, elle, génère les observations x_1,
> ## ..., x_n et calcule la somme s = x_1 + ... + x_n.
> sapply(rpois(10, 2), function(n) sum(rgamma(n, 2, 1)))
 [1] 2.4072898 7.2315906 5.3110907 0.9298443 0.7095300 4.0595791 6.4886584
 [8] 2.3977950 5.3832132 2.6904869
> 
> ## Une approche alternative consiste à générer les
> ## observations de la loi de Poisson et toutes les
> ## observations de la loi gamma, à séparer ces dernières en
> ## catégories à l'aide de facteurs et à effectuer les sommes
> ## par catégorie. Il faut explicitement tenir compte, dans
> ## cette procédure, des cas où N = 0.
> s <- numeric(10)               # contenant avec des 0
> N <- rpois(10, 2)              # échantillon loi de Poisson
> x <- rgamma(sum(N), 2, 1)      # échantillon loi gamma
> f <- rep.int(seq_len(10), N)   # facteurs
> s[which(N != 0)] <- tapply(x, f, sum) # sommes par catégorie
> s                                       # résultats
 [1] 2.1065475 7.5207479 3.3866219 1.8331287 7.9944204 0.4395819 0.0000000
 [8] 2.6954857 5.4611177 6.4399417
> 
> ## La seconde approche est moins intuitive que la première,
> ## mais elle s'avère plus simple à programmer de manière
> ## générale et, de plus, elle est un peu plus rapide.
> n <- 1e6
> system.time(sapply(rpois(n, 2), function(n) sum(rgamma(n, 2, 1))))
utilisateur     système      écoulé 
      3.533       0.192       3.735 
> system.time({
+     s <- numeric(n)
+     N <- rpois(n, 2)
+     x <- rgamma(sum(N), 2, 1)
+     f <- rep.int(seq_len(n), N)
+     s[which(N != 0)] <- tapply(x, f, sum);
+     s})
utilisateur     système      écoulé 
      1.879       0.101       1.984 
> 
> ## C'est l'approche utilisée par les fonctions 'rcomppois' et
> ## 'rcompound' de actuar.
> rcomppois
function (n, lambda, model.sev, SIMPLIFY = TRUE) 
{
    cl.sev <- substitute(model.sev)
    if (is.name(cl.sev)) 
        cl.sev <- eval(cl.sev)
    if (cl.sev[[1L]] == "expression") 
        cl.sev <- cl.sev[[-1L]]
    res <- numeric(n)
    N <- rpois(n, lambda)
    cl.sev$n <- sum(N)
    x <- eval(cl.sev)
    f <- rep.int(seq_len(n), N)
    res[which(N != 0)] <- tapply(x, f, sum)
    if (SIMPLIFY) 
        res
    else list(aggregate = res, frequency = N, severity = x)
}
<bytecode: 0x7f84de275e18>
<environment: namespace:actuar>
> 
> ## Nous pouvons simuler une Poisson composée de manière plus
> ## intuitive avec la fonction 'rcomppois'. Nous spécifions le
> ## modèle de variable aléatoire X comme dans 'rmixture'.
> ## Puisqu'il n'y a qu'un modèle à spécifier, il n'est pas
> ## nécessaire de le placer dans 'expression'.
> rcomppois(10, 2, rgamma(2, 1))
 [1] 7.2822887 3.7042609 0.0000000 7.0601006 6.7467539 2.2506876 6.1086526
 [8] 3.4123837 0.6644963 0.2767338
> 
> ## La fonction 'rcompound' permet de simuler des distributions
> ## composées générales où la distribution de fréquence est
> ## autre que la Poisson. Voici un exemple de binomiale
> ## négative composée.
> rcompound(10, rnbinom(2, 0.2), rgamma(2, 1)) # 
 [1] 14.835458 15.059720 15.056009 44.938990  6.680001 26.106170  0.000000
 [8] 17.018317 20.299197 35.410668
> 
