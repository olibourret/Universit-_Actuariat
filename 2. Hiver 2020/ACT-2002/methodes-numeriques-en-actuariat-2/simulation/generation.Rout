
R Under development (unstable) (2019-11-07 r77386) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> options(error=expression(NULL))
> ## Copyright (C) 2020 Vincent Goulet
> ##
> ## Ce fichier fait partie du projet
> ## "Méthodes numériques en actuariat avec R"
> ## https://gitlab.com/vigou3/methodes-numeriques-en-actuariat
> ##
> ## Cette création est mise à disposition sous licence
> ## Attribution-Partage dans les mêmes conditions 4.0
> ## International de Creative Commons.
> ## https://creativecommons.org/licenses/by-sa/4.0/
> 
> ###
> ### EFFET DES PARAMÈTRES D'UN GÉNÉRATEUR  
> ###
> 
> ## Définissons tout d'abord une petite fonction pour calculer
> ## les valeurs successives d'un générateur congruentiel
> ## linéaire général.
> rand <- function(n, a, c, m, seed)
+ {
+     x <- numeric(n + 1)
+     x[1] <- seed
+     for (i in seq(n))
+         x[i + 1] <- (a * x[i] + c) %% m
+     x[-1]
+ }
> 
> ## Nous pouvons toujours obtenir une période maximale de m
> ## avec un générateur congruentiel en posant a = c = 1, mais
> ## l'aspect aléatoire de la suite de nombres obtenus en prend
> ## alors pour son rhume...
> rand(17, a = 1, c = 1, m = 16, seed = 0)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15  0  1
> 
> ## Avec un meilleur choix de multiplicateur et d'incrément, la
> ## période est tout aussi longue, mais la suite davantage
> ## aléatoire.
> rand(17, a = 5, c = 1, m = 16, seed = 0)
 [1]  1  6 15 12 13  2 11  8  9 14  7  4  5 10  3  0  1
> 
> ## Un tout petit changement et la période est beaucoup plus
> ## courte. Même la valeur de l'amorce a une influence sur la
> ## période.
> rand(17, a = 5, c = 4, m = 16, seed = 0)
 [1]  4  8 12  0  4  8 12  0  4  8 12  0  4  8 12  0  4
> rand(17, a = 5, c = 4, m = 16, seed = 1)
 [1] 9 1 9 1 9 1 9 1 9 1 9 1 9 1 9 1 9
> rand(17, a = 5, c = 4, m = 16, seed = 2)
 [1] 14 10  6  2 14 10  6  2 14 10  6  2 14 10  6  2 14
> 
> ## Le générateur multiplicatif de l'exemple 1.2 ne satisfait
> ## pas les conditions pour que la période soit maximale (7
> ## n'est pas une racine primitive de 31).
> rand(32, a = 7, c = 0, m = 31, seed = 19)
 [1]  9  1  7 18  2 14  5  4 28 10  8 25 20 16 19  9  1  7 18  2 14  5  4 28 10
[26]  8 25 20 16 19  9  1
> length(unique(rand(32, a = 7, c = 0, m = 31, seed = 19)))
[1] 15
> 
> ## Avec a = 3, on atteint la période de 30 car 3 est une
> ## racine primitive de 31.
> length(unique(rand(32, a = 3, c = 0, m = 31, seed = 19)))
[1] 30
> 
> ###
> ### ANALYSE DE LA QUALITÉ D'UN GÉNÉRATEUR
> ###
> 
> ## Un générateur avec une période de 30. Les valeurs obtenues
> ## semblent assez aléatoires.
> (x <- rand(30, a = 3, c = 0, m = 31, seed = 19))
 [1] 26 16 17 20 29 25 13  8 24 10 30 28 22  4 12  5 15 14 11  2  6 18 23  7 21
[26]  1  3  9 27 19
> 
> ## Un graphique des valeurs successives ne montre pas de
> ## structure particulière.
> par(pch = 19)              # disque plein comme symbole
> plot(x)
> 
> ## Par contre, si nous traçons un graphique des paires de
> ## valeurs successives (c'est-à-dire x[1] en fonction de x[2],
> ## x[2] en fonction de x[3], etc.), un portrait dérangeant
> ## apparait.
> plot(head(x, -1), tail(x, -1))
> 
> ## Augmenter la valeur du multiplicateur améliore la
> ## situation. Si nous utilisons plutôt a = 12 (une racine
> ## primitive), alors la période est toujours de 30 et donc les
> ## valeurs de la suite sont les mêmes que ci-dessus, dans un
> ## ordre différent. Cependant, les valeurs sont mieux
> ## distribuées.
> x <- rand(30, a = 12, c = 0, m = 31, seed = 19)
> plot(head(x, -1), tail(x, -1))
> 
> ## Illustrons par six autres graphiques comment le
> ## choix des paramètres d'un générateur congruentiel
> ## peut avoir une importance majeure sur la qualité des
> ## nombres générés.
> par(mfrow = c(3, 2)) # 6 graphiques sur 3 lignes, 2 colonnes
> 
> x <- rand(2048, a = 65, c = 1, m = 2048, seed = 0)
> plot(tail(x, -1), head(x, -1), main = "a = 65, c = 1")
> 
> x <- rand(2048, a = 1365, c = 1, m = 2048, seed = 0)
> plot(tail(x, -1), head(x, -1), main = "a = 1365, c = 1")
> 
> x <- rand(2048, a = 1229, c = 1, m = 2048, seed = 0)
> plot(tail(x, -1), head(x, -1), main = "a = 1229, c = 1")
> 
> x <- rand(2048, a = 157, c = 1, m = 2048, seed = 0)
> plot(tail(x, -1), head(x, -1), main = "a = 157, c = 1")
> 
> x <- rand(2048, a = 45, c = 0, m = 2048, seed = 1234)
> plot(tail(x, -1), head(x, -1), main = "a = 45, c = 0")
> 
> x <- rand(2048, a = 43, c = 0, m = 2048, seed = 1234)
> plot(tail(x, -1), head(x, -1), main = "a = 43, c = 0")
> 
