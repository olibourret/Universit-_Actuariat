
R Under development (unstable) (2019-11-07 r77386) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> options(error=expression(NULL))
> ## Copyright (C) 2020 Vincent Goulet
> ##
> ## Ce fichier fait partie du projet
> ## "Méthodes numériques en actuariat avec R"
> ## https://gitlab.com/vigou3/methodes-numeriques-en-actuariat
> ##
> ## Cette création est mise à disposition sous licence
> ## Attribution-Partage dans les mêmes conditions 4.0
> ## International de Creative Commons.
> ## https://creativecommons.org/licenses/by-sa/4.0/
> 
> ###
> ### VALEURS ET VECTEURS PROPRES  
> ###
> 
> ## Nous allons illustrer le calcul des valeurs et vecteurs
> ## propres dans R avec une matrice utilisée dans les exemples
> ## du chapitre.
> (A <- matrix(c(0, 1, 1, 0, 2, 0, -2, 1, 3), nrow = 3))
     [,1] [,2] [,3]
[1,]    0    0   -2
[2,]    1    2    1
[3,]    1    0    3
> 
> ## La fonction 'eigen' calcule les valeurs propres et vecteurs
> ## propres d'une matrice.
> (e <- eigen(A))
eigen() decomposition
$values
[1] 2 2 1

$vectors
     [,1]       [,2]       [,3]
[1,]    0  0.7071068 -0.8164966
[2,]    1  0.0000000  0.4082483
[3,]    0 -0.7071068  0.4082483

> 
> ## Les vecteurs propres sont normalisés de sorte que leur
> ## norme (longueur) soit toujours égale à 1. Pour vérifier les
> ## résultats calculés algébriquement, comparer simplement les
> ## valeurs relatives des coordonnées des vecteurs.
> e$values[c(1, 2)]          # deux premières valeurs propres...
[1] 2 2
> e$vectors[, c(1, 2)]       # ... et vecteurs correspondants
     [,1]       [,2]
[1,]    0  0.7071068
[2,]    1  0.0000000
[3,]    0 -0.7071068
> e$vectors[, 2]             # équivalent à (1, 0, -1)
[1]  0.7071068  0.0000000 -0.7071068
> e$vectors[, 2] * sqrt(2)   # avec norme de 2 plutôt que 1
[1]  1  0 -1
> 
> e$values[3]                # troisième valeur propre
[1] 1
> e$vectors[, 3]             # vecteur équivalent à (-2, 1, 1)
[1] -0.8164966  0.4082483  0.4082483
> e$vectors[, 3] * sqrt(6)   # avec norme de 6 plutôt que 1
[1] -2  1  1
> 
> ## Si la matrice est symétrique, les vecteurs propres sont
> ## orthonormaux.
> (A <- matrix(c(4, 2, 2, 2, 4, 2, 2, 2, 4), nrow = 3))
     [,1] [,2] [,3]
[1,]    4    2    2
[2,]    2    4    2
[3,]    2    2    4
> crossprod(eigen(A)$vectors) # matrice identité  
              [,1]          [,2]          [,3]
[1,]  1.000000e+00 -1.110223e-16 -1.387779e-16
[2,] -1.110223e-16  1.000000e+00 -5.551115e-17
[3,] -1.387779e-16 -5.551115e-17  1.000000e+00
> 
> ###
> ### ANALYSE EN COMPOSANTES PRINCIPALES  
> ###
> 
> ## Installation du paquetage RSKC pour obtenir les données
> ## "Optical Recognition of Handwritten Digits". Exécuter une
> ## seule fois!
> #install.packages("RSKC")
> 
> ## Chargement du jeu de données 'optd' sans charger tout le
> ## paquetage dans la session de travail.
> data(optd, package = "RSKC")
> 
> ## Création du graphique des deux composantes principales.
> optd.acp <- prcomp(optd, center = TRUE, scale. = FALSE)
> optd.coord <- predict(optd.acp, newdata = optd)
> plot(x = optd.coord[, 1], y = optd.coord[, 2], type = "n",
+      xlab = expression(Y[1]), ylab = expression(Y[2]))
> text(x = optd.coord[, 1], y = optd.coord[, 2],
+      labels = rownames(optd), cex = 0.5,
+      col = rainbow(10)[as.numeric(rownames(optd)) + 1])
> rect(-8, -30, 10, -16, lty = 2, border = "gray")
> 
