
R Under development (unstable) (2019-11-07 r77386) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> options(error=expression(NULL))
> ## Copyright (C) 2020 Vincent Goulet
> ##
> ## Ce fichier fait partie du projet
> ## "Méthodes numériques en actuariat avec R"
> ## https://gitlab.com/vigou3/methodes-numeriques-en-actuariat
> ##
> ## Cette création est mise à disposition sous licence
> ## Attribution-Partage dans les mêmes conditions 4.0
> ## International de Creative Commons.
> ## https://creativecommons.org/licenses/by-sa/4.0/
> 
> ###
> ### MATRICES ET VECTEURS
> ###
> 
> ## La fonction 'diag' a plusieurs usages. Un premier consiste
> ## à extraire la diagonale d'une matrice carrée.
> (a <- matrix(1:9, nrow = 3))
     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9
> diag(a)
[1] 1 5 9
> 
> ## Si la matrice passée en argument est rectangulaire 'm x n',
> ## 'diag' retourne la liste des éléments a[i, i], i = 1, ...,
> ## min(m, n).
> (a <- matrix(1:12, nrow = 4))
     [,1] [,2] [,3]
[1,]    1    5    9
[2,]    2    6   10
[3,]    3    7   11
[4,]    4    8   12
> diag(a)
[1]  1  6 11
> 
> ## Lorsque l'on passe un vecteur à la fonction 'diag', le
> ## résultat est une matrice diagonale formée du vecteur.
> diag(1:3)
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0    2    0
[3,]    0    0    3
> 
> ## Enfin, lorsque l'argument de 'diag' est un scalaire 'n', le
> ## résultat est la matrice identité 'n x n'.
> diag(3)
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0    1    0
[3,]    0    0    1
> 
> ## La fonction 'lower.tri' (respectivement 'upper.tri')
> ## retourne une matrice de la même dimension que celle passée
> ## en argument avec des valeurs TRUE (FALSE) aux positions des
> ## éléments sous la diagonale et FALSE (TRUE) aux positions
> ## au-dessus de la diagonale. La diagonale sera dans le
> ## premier ou dans le second groupe selon que l'argument
> ## 'diag' est TRUE ou FALSE.
> (a <- matrix(1:9, nrow = 3))
     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9
> lower.tri(a)
      [,1]  [,2]  [,3]
[1,] FALSE FALSE FALSE
[2,]  TRUE FALSE FALSE
[3,]  TRUE  TRUE FALSE
> upper.tri(a, diag = TRUE)
      [,1]  [,2] [,3]
[1,]  TRUE  TRUE TRUE
[2,] FALSE  TRUE TRUE
[3,] FALSE FALSE TRUE
> 
> ## On utilise les fonctions 'lower.tri' et 'upper.tri'
> ## principalement pour extraire les éléments au-dessus ou
> ## au-dessous de la diagonale d'une matrice carrée.
> a[lower.tri(a)]
[1] 2 3 6
> a[upper.tri(a)]
[1] 4 7 8
> 
> ## Bien que rarement nécessaires en R, on peut créer des
> ## vecteurs ligne ou colonne avec les fonctions 'rbind' et
> ## 'cbind', dans l'ordre.
> rbind(1:3)
     [,1] [,2] [,3]
[1,]    1    2    3
> dim(rbind(1:3))
[1] 1 3
> cbind(1:3)
     [,1]
[1,]    1
[2,]    2
[3,]    3
> 
> ###
> ### ARITHMÉTIQUE MATRICIELLE
> ###
> 
> ## Le produit matriciel s'effectue en R avec l'opérateur
> ## '%*%', et non avec '*', qui fait le produit élément par
> ## élément (une opération qui n'est pas définie en
> ## arithmétique matricielle usuelle, mais qui l'est dans R).
> (a1 <- matrix(c(1, 2, 2, 6, 4, 0), nrow = 2))
     [,1] [,2] [,3]
[1,]    1    2    4
[2,]    2    6    0
> (a2 <- matrix(c(4, 0, 2, 1, -1, 7, 4, 3, 5, 3, 1, 2), nrow = 3))
     [,1] [,2] [,3] [,4]
[1,]    4    1    4    3
[2,]    0   -1    3    1
[3,]    2    7    5    2
> a1 %*% a2
     [,1] [,2] [,3] [,4]
[1,]   12   27   30   13
[2,]    8   -4   26   12
> 
> ## Il n'y a pas d'opérateur pour calculer la trace d'une
> ## matrice carrée. Il suffit de sommer les éléments de la
> ## diagonale.
> a
     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9
> sum(diag(a))
[1] 15
> 
> ## La transposée est obtenue avec la fonction 't'.
> t(a)
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6
[3,]    7    8    9
> 
> ###
> ### DÉTERMINANT ET INVERSE
> ###
> 
> ## Le déterminant d'une matrice est obtenu avec la fonction
> ## 'det'.
> A <- matrix(c(1, 2, 1, 2, 5, 0, 3, 3, 8), nrow = 3)
> det(A)
[1] -1
> 
> ## Avec pour seul argument une matrice carrée, la fonction
> ## 'solve' calcule l'inverse de cette matrice.
> solve(A)
     [,1] [,2] [,3]
[1,]  -40   16    9
[2,]   13   -5   -3
[3,]    5   -2   -1
> 
> ## Avec deux arguments, une matrice 'A' et un vecteur 'b',
> ## 'solve' calcule la solution du système d'équations 'Ax =
> ## b', c'est-à-dire 'A^{-1} b'.
> b <- 1:3
> solve(A, b)
[1] 19 -6 -2
> 
> ## À noter qu'il est *beaucoup* plus rapide de calculer
> ## directement la solution du système d'équations avec
> ## 'solve(A, b)' que d'inverser la matrice et calculer la
> ## solution par la suite avec 'solve(A) %*% b'. Pour en faire
> ## la démonstration, on doit utiliser de grands objets.
> A <- matrix(rnorm(500^2), nrow = 500)
> b <- rnorm(500)
> system.time(solve(A) %*% b)
utilisateur     système      écoulé 
      0.108       0.001       0.109 
> system.time(solve(A, b))
utilisateur     système      écoulé 
      0.032       0.000       0.033 
> 
