
R Under development (unstable) (2019-11-07 r77386) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> options(error=expression(NULL))
> ## Copyright (C) 2020 Vincent Goulet
> ##
> ## Ce fichier fait partie du projet
> ## "Méthodes numériques en actuariat avec R"
> ## https://gitlab.com/vigou3/methodes-numeriques-en-actuariat
> ##
> ## Cette création est mise à disposition sous licence
> ## Attribution-Partage dans les mêmes conditions 4.0
> ## International de Creative Commons.
> ## https://creativecommons.org/licenses/by-sa/4.0/
> 
> ###
> ### POLYNÔMES D'INTERPOLATION DE LAGRANGE  
> ###
> 
> ## La fonction 'poly.calc' du package 'polynom' permet de
> ## calculer le polynôme d'interpolation de Lagrange passant
> ## par un ensemble de points (x, y), où x et y sont des
> ## vecteurs de même longueur. Le package n'est pas livré avec
> ## R, il faut donc l'installer depuis CRAN, puis le charger en
> ## mémoire. [Décommenter la ligne ci-dessous pour installer
> ## (une seule fois!) le package.]
> #install.packages("polynom", repos = "https://cran.ca.r-project.org")
> library(polynom)
> 
> ## Soit f(x) = 1/x. Calculons les coefficients des polynômes
> ## d'interpolation de Lagrange de degré 1 et 2 pour cette
> ## fonction.
> x <- c(2, 2.75, 4)                  # noeuds de f
> (P1 <- poly.calc(x[1:2], 1/x[1:2])) # polynôme de degré 1
0.8636364 - 0.1818182*x 
> (P2 <- poly.calc(x, 1/x))           # polynôme de degré 2
1.113636 - 0.3977273*x + 0.04545455*x^2 
> 
> ## Pour calculer la valeur des polynômes en un point, il faut
> ## utiliser la fonction 'predict'.
> predict(P1, 3)             # tel qu'obtenu dans le texte
[1] 0.3181818
> predict(P2, 3)             # idem  
[1] 0.3295455
> 
> ###
> ### MÉTHODES D'INTÉGRATION NUMÉRIQUE  
> ###
> 
> ## Pas de démonstration en R des méthodes étudiées dans le
> ## chapitre. Il est laissé en exercice d'écrire des fonctions
> ## 'pointmilieu', 'trapeze', 'simpson' et 'simpson38'.
> ## Cependant, il y a dans R une fonction 'integrate' qui
> ## permet d'intégrer numériquement une fonction 'f' entre des
> ## bornes 'lower' et 'upper'.
> integrate(sin, 0, 2)            # intégrale de sin(x)
1.416147 with absolute error < 1.6e-14
> f <- function(x) x^2 * exp(-x)  # une autre fonction
> integrate(f, 0, 1)              # intégrale sur [0, 1]
0.1606028 with absolute error < 1.8e-15
> integrate(dnorm, -1.645, 1.645) # exemple du chapitre 
0.9000302 with absolute error < 7.4e-14
> 
