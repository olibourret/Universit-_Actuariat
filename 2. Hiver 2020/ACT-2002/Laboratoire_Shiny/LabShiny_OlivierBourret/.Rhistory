}
list(fixed.point = x, nb.iter = i)
)
pointfixe <- function(FUN, start, TOL = 1E-6, MAX.ITER = 100, echo = FALSE)
{
x <- start(
if(echo)
expr <- expression(print(xt <- x))
else
expr <- expression(xt <- x)
i <- 0
repeat
{
eval(expr)
x <- FUN(xt)
if(abs(x-xt)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum number of iteratitons reached without convergence')
}
list(fixed.point = x, nb.iter = i)
)
}
pointfixe <- function(FUN, start, TOL = 1E-6, MAX.ITER = 100, echo = FALSE)
{
x <- start(
if(echo)
expr <- expression(print(xt <- x))
else
expr <- expression(xt <- x)
i <- 0
repeat
{
eval(expr)
x <- FUN(xt)
if(abs(x-xt)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum number of iteratitons reached without convergence')
}
list(fixed.point = x, nb.iter = i)
)
}
}
pointfixe <- function(FUN, start, TOL = 1E-6, MAX.ITER = 100, echo = FALSE)
{
x <- start
if(echo)
expr <- expression(print(xt <- x))
else
expr <- expression(xt <- x)
i <- 0
repeat
{
eval(expr)
x <- FUN(xt)
if(abs(x-xt)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum number of iteratitons reached without convergence')
}
list(fixed.point = x, nb.iter = i)
}
ex1 <- expression(1 + 0:9)
ex1
View(bissection)
ex1 <- expression(1 + 0:9)
length(ex1)
g <- function(x) (1 - (1 + x)^(-10))/8.2218
f <- function(x) x
lim <- c(0.035, 0.040)
curve(g, xlim = lim, ylim = lim, lwd = 2, xlab = "i", ylab ="g(i)")
curve(f, add = TRUE)
polygon(rep(lim, each = 2), c(lim, rev(lim)), lty = "dashed", border = "blue")
pointfixe(g, start = 0.0375, echo = TRUE)
g1 <- function(x) x - x^3 - 4 * x^2 + 10
g2 <- function(x) sqrt(10/x - 4*x)
g3 <- function(x) sqrt(10 - x^3)/2
g4 <- function(x) sqrt(10/(4 + x))
g5 <- function(x) x - (x^3 + 4*x^2 - 10)/(3*x^2 + 8*x)
pointfixe(g1, 1.5)
pointfixe(g1, 1.5, echo = TRUE)
pointfixe(g2, 1.5)
pointfixe(g3, 1.5)
pointfixe(g4, 1.5)
pointfixe(g5, 1.5)
pointfixe(g5, 0)
pointfixe(g5, 1)
pointfixe(g5, 0.5)
pointfixe(g5, 0)
pointfixe(g5, 0.2)
nr <- function(FUN, FUNp, start, TOL = 1E-6, MAX.ITER = 100, echo = FALSE, ...)
x <- start(
if(echo)
expr <- expression(print(xt <- x))
else
expr <- expression(xt <- x)
)
nr <- function(FUN, FUNp, start, TOL = 1E-6, MAX.ITER = 100, echo = FALSE, ...)
{
x <- start
if(echo)
expr <- expression(print(xt <- x))
else
expr <- expression(xt <- x)
i <- 0
repeat
{
eval(expr)
x <- xt - FUN(xt, ...)/FUNp(xt, ...)
if(abs(x - xt)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum noumber of iterations reached without convergence')
}
list(root = x, nb.iter = i)
}
nr <- function(FUN, FUNp, start, TOL = 1E-6, MAX.ITER = 100, echo = FALSE, ...)
{
x <- start
if(echo)
expr <- expression(print(xt <- x))
else
expr <- expression(xt <- x)
i <- 0
repeat
{
eval(expr)
x <- xt - FUN(xt, ...)/FUNp(xt, ...)
if(abs(x - xt)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum noumber of iterations reached without convergence')
}
list(root = x, nb.iter = i)
}
f <- function(i) (1 - (1 + i)^(-10))/i - 8.2218
fp <- function(i) (10 * i * (1 + i)^(-11) + (1 + i)^(-10) - 1)/1^2
nr(f, fp, start = 0.0375, echo = TRUE)
g <- function(i) i-f(i)/fp(i)
pointfixe(g, 0.0375, echo = TRUE)
nr <- function(FUN, FUNp, start, TOL = 1E-6, MAX.ITER = 100, echo = FALSE, ...)
{
x <- start
if(echo)
expr <- expression(print(xt <- x))
else
expr <- expression(xt <- x)
i <- 0
repeat
{
eval(expr)
x <- xt - FUN(xt, ...)/FUNp(xt, ...)
if(abs(x - xt)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum noumber of iterations reached without convergence')
}
list(root = x, nb.iter = i)
}
f <- function(i) (1 - (1 + i)^(-10))/i - 8.2218
fp <- function(i) (10 * i * (1 + i)^(-11) + (1 + i)^(-10) - 1)/1^2
nr(f, fp, start = 0.0375, echo = TRUE)
fp <- function(i) (10 * i * (1 + i)^(-11) + (1 + i)^(-10) - 1)/i^2
nr(f, fp, start = 0.0375, echo = TRUE)
g <- function(i) i-f(i)/fp(i)
pointfixe(g, 0.0375, echo = TRUE)
f <- function(x) x-2^(-x)
uniroot(f, c(0, 1))
optimize(dbeta, interval = c(0, 1), maximum = TRUE, shape1 = 3, shape2 = 2)
optimize(dbeta, interval = c(0, 1), shape1 = 3, shape2 = 2, maximum = TRUE)
curve(dbeta(x,3,2))
curve(h=1.777778)
abline(h=1.777778)
abline(h=1.777778, v = 0.6666795)
set.seed(1)
x <- rgamma(10, 5, 2)
prod(dgamma(x, shape, rate))
prod(dgamma(x, 5, 2))
f <- function(p, x) -sum(dgamma(x, p[1], p[2], log = TRUE))
f
nlm(f, c(1,1), x = x)
curve(f(x, c(1, 1)))
curve(f(c(1, 1), x)
curve(f(c(1, 1), x))
curve(f(c(1, 1), x))
curve(-sum(dgamma(x, 1, 1, log = TRUE)))
curve(dgamma(x, 1, 1))
curve(dgamma(x, 1, 1, log = TRUE))
f2 <- function(logp, x)
{
p <- exp(logp)
-sum(dgamma(x, p[1], p[2], log = TRUE))
}
nlm(f2, c(0, 0), x = x)
exp(nlm(f2, c(0, 0), x = x)$estimate)
exp(-3.091942e-06)
exp(1.7907530)
nlminb(c(1, 1), f, x = x, lower = 0, upper = Inf)
optim(c(1, 1), f, x = x)
polyroot(c(-10, 0, 4, 1))
Re(polyroot(c(-10, 0, 4, 1)))
Im(polyroot(c(-10, 0, 4, 1)))
curve(x^3 + 4 * x^2 - 10, xlim = c(-3, 2), ylim = c(-10, 10))
abline(h = 0, v = 0)
curve(x^3 + 4 * x^2 - 10, xlim = c(-5, 2), ylim = c(-10, 10))
abline(h = 0, v = 0)
x <- 0.0375
expr <- expression(print(xt <- x))
i <- 0
eval(expr)
x <- xt - (function(i) (1 - (1 + i)^(-10))/i - 8.2218)/(function(i) (10 * i * (1 + i)^(-11) + (1 + i)^(-10) - 1)/i^2)
x <- xt - (function(i) (1 - (1 + i)^(-10))/i - 8.2218)/(function(i) (10 * i * (1 + i)^(-11) + (1 + i)^(-10) - 1)/i^2)
x <- xt - ((1 - (1 + i)^(-10))/i - 8.2218)/((10 * i * (1 + i)^(-11) + (1 + i)^(-10) - 1)/i^2)
if(abs(x - xt)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum noumber of iterations reached without convergence')
if(abs(x - xt)/abs(x) < 1E-6)
break
abs(x - xt)/abs(x)
x <- 0.0375
expr <- expression(print(xt <- x))
expr <- expression(xt <- x)
expr <- expression(print(xt <- x))
eval(expr)
x <- xt - ((1 - (1 + i)^(-10))/i - 8.2218)/((10 * i * (1 + i)^(-11) + (1 + i)^(-10) - 1)/i^2)
abs(x - xt)/abs(x)
x <- 0.0375
expr <- expression(print(xt <- x))
i <- 0
eval(expr)
x <- xt - ((1 - (1 + xt)^(-10))/xt - 8.2218)/((10 * xt * (1 + xt)^(-11) + (1 + xt)^(-10) - 1)/xt^2)
abs(x - xt)/abs(x)
(i <- i + 1)
i
eval(expr)
x <- xt - ((1 - (1 + xt)^(-10))/xt - 8.2218)/((10 * xt * (1 + xt)^(-11) + (1 + xt)^(-10) - 1)/xt^2)
abs(x - xt)/abs(x)
(i <- i + 1)
i
eval(expr)
x <- xt - ((1 - (1 + xt)^(-10))/xt - 8.2218)/((10 * xt * (1 + xt)^(-11) + (1 + xt)^(-10) - 1)/xt^2)
abs(x - xt)/abs(x)
(i <- i + 1)
i
eval(expr)
x <- xt - ((1 - (1 + xt)^(-10))/xt - 8.2218)/((10 * xt * (1 + xt)^(-11) + (1 + xt)^(-10) - 1)/xt^2)
abs(x - xt)/abs(x)
(i <- i + 1)
list(root = x, nb.iter = i)
secante <- function(FUN, x0, x1, TOL = 1E-6, MAX.ITER = 100, echo = FALSE, ...)
{
if(echo)
expr <- expression(print(x <- x1))
else
expr <- expression(x <- x1)
i <- 0
repeat
{
eval(expr)
x <- x1 - FUN(x1, ...) * (x1 - x0)/(FUN(x1, ...) - FUN(x0))
x0 <- x1
x1 <- x
if(abs(x - x1)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum noumber of iterations reached without convergence')
}
list(root = x, nb.iter = i)
}
nr(FUN = x^3 - 2 * x^2 - 5, FUNp = 3 * x^2 - 4 * x, start = 1, echo = TRUE)
f <- x^3 - 2 * x^2 - 5
fp <- 3 * x^2 - 4 * x
nr(f , fp, start = 1, echo = TRUE)
nr <- function(FUN, FUNp, start, TOL = 1E-6, MAX.ITER = 100, echo = FALSE, ...)
{
x <- start
if(echo)
expr <- expression(print(xt <- x))
else
expr <- expression(xt <- x)
i <- 0
repeat
{
eval(expr)
x <- xt - FUN(xt, ...)/FUNp(xt, ...)
if(abs(x - xt)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum noumber of iterations reached without convergence')
}
list(root = x, nb.iter = i)
}
nr(f , fp, start = 1, echo = TRUE)
nr <- function(FUN, FUNp, start, TOL = 1E-6, MAX.ITER = 100, echo = FALSE, ...)
{
x <- start
if(echo)
expr <- expression(print(xt <- x))
else
expr <- expression(xt <- x)
i <- 0
repeat
{
eval(expr)
x <- xt - FUN(xt, ...)/FUNp(xt, ...)
if(abs(x - xt)/abs(x) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum noumber of iterations reached without convergence')
}
list(root = x, nb.iter = i)
}
nr(f , fp, start = 1, echo = TRUE)
f <- function(i) i^3 - 2 * i^2 - 5
fp <- function(i) 3 * i^2 - 4 * i
nr(f , fp, start = 1, echo = TRUE)
f <- function(i) i^2 - 2
bissection(f, lower = 0, upper = 2, TOL = 1E-5, echo = TRUE)
f <- function(i) 2-(-1)
fp <- function(i) -log(2) * 2^(-i)
nr(f, fp, 1, echo = TRUE)
nr(f, fp, 0, echo = TRUE)
nr(f, fp, 0.5, echo = TRUE)
f <- function(i) 2-(-i)
fp <- function(i) -log(2) * 2^(-i)
nr(f, fp, 0.5, echo = TRUE)
f <- function(i) 2^(-i)
fp <- function(i) -log(2) * 2^(-i)
nr(f, fp, 0.5, echo = TRUE)
pointfixe(f, 0, echo = TRUE)
f <- function(i) (20 * i +21 * i^(-2))/21
pointfixe(f, 0, echo = TRUE)
pointfixe(f, 1, echo = TRUE)
f <- function(i) (i - (i^3 - 21)/(3 * x^2))
pointfixe(f, 1, echo = TRUE)
f <- function(i) (i - (i^3 - 21)/(3 * i^2))
pointfixe(f, 1, echo = TRUE)
f <- function(i) (i - (i^4 - 21 * i)/(i^2 - 21))
pointfixe(f, 1, echo = TRUE)
f <- function(i) (i - (i^4 - 21 * i)/(i^2 - 21))
pointfixe(f, 2, echo = TRUE)
library(polynom)
install.packages("polynom")
library(polynom)
x <- c(2, 2.75, 4)
(p1 <- poly.calc(x[1:2], 1/x[1:2]))
(p2 <- poly.calc(x, 1/x))
predict(p1, 3)
predict(p2, 3)
integrate(sin, 0, 2)
f <- function(x) x^2 * exp(-x)
integrate(f, 0, 1)
integrate(dnorm, -1.645, 1,645)
integrate(dnorm, -1.645, 0)
integrate(dnorm, 0, 1.645)
integrate(dnorm, -1.645, 0) *2
(integrate(dnorm, -1.645, 0))*2
integrate(dnorm, -1.645, 0) + integrate(dnorm, 0, 1.645)
integrate(dnorm, -1.645, 1.645)
Re(polyroot(c(-10, 0, 4, 1)))
polyroot(c(-10, 0, 4, 1))
Re(polyroot(c(-10, 0, 4, 1)))
Im(polyroot(c(-10, 0, 4, 1)))
curve(x^3 + 4 * x^2 - 10, xlim = c(-5, 2), ylim = c(-10, 10))
abline(h = 0, v = 0)
curve(4*x^2 - 14*x + 14, from = 0, to =5)
abline(a=0, b = 1)
curve(4*x^2 - 14*x + 14, from = /, to =3)
curve(4*x^2 - 14*x + 14, from = 1, to =3)
abline(a=0, b = 1)
x <- c(-1,2,3)
all(x >0)
x[1,2]
x[1]
x[1:#]
x[1:3]
x <- c(-1,2,3)
x[1:3]
x[1:3] * 2^(1:3-1)
x * 2^(1:3-1)
v <- (1 + i)^-1
sum(x * 2^(1:3-1))
x <- c(-10,5,2,12,-7, 11)
polyroot(x)
Im(polyroot(x))
all.equal(Im(polyroot(x)), 0, tolerance = .Machine$double.eps^0.5)
all.equal(Im(polyroot(x)), 0, tolerance = .Machine$double.eps^0.5, rep(0, length(x)))
all.equal(Im(polyroot(x)), 0, tolerance = .Machine$double.eps^0.5, rep(1, length(x)))
all.equal(Im(polyroot(x)), 0, tolerance = .Machine$double.eps^0.5, rep(0, length(x)))
rep(0, length(x)
rep(0, length(x))
rep(0, length(x))
all.equal(Im(polyroot(x)), rep(0, length(x)), tolerance = .Machine$double.eps^0.5))
all.equal(Im(polyroot(x)), rep(0, length(x)), tolerance = .Machine$double.eps^0.5)
all.equal(Im(polyroot(x)), rep(0, length(x)-1), tolerance = .Machine$double.eps^0.5)
sapply(Im(polyroot(x)), all.equal(0, tolerance = .Machine$double.eps^0.5))
sapply(x, all.equal(Im(polyroot(x)), 0, tolerance = .Machine$double.eps^0.5))
all.equal(Im(polyroot(x)), rep(0, length(x)-1), tolerance = .Machine$double.eps^0.5)
all.equal(Im(polyroot(x)), rep(0, length(x)-1), tolerance = .Machine$double.eps^0.5)
sapply(Im(polyroot(x)), all.equal(current = 0, tolerance = .Machine$double.eps^0.5))
lapply(Im(polyroot(x)), all.equal(current = 0, tolerance = .Machine$double.eps^0.5))
all.equal(Im(polyroot(x)), rep(0, length(x)-1), tolerance = .Machine$double.eps^0.5)
Im(polyroot(x)) < .Machine$double.eps^0.5
Im(polyroot(x))
polyroot(x)
(Im(polyroot(x)) < .Machine$double.eps^0.5 | Im(polyroot(x)) > .Machine$double.eps^0.5)
(Im(polyroot(x)) < .Machine$double.eps^0.5 | Im(polyroot(x)) > -.Machine$double.eps^0.5)
Im(polyroot(x)) < 0
abs(Im(polyroot(x))) < .Machine$double.eps^0.5
re(polyroot(x))[abs(Im(polyroot(x))) < .Machine$double.eps^0.5]
Re(polyroot(x))[abs(Im(polyroot(x))) < .Machine$double.eps^0.5]
(Re(polyroot(x))[abs(Im(polyroot(x))) < .Machine$double.eps^0.5])^(-1) - 1
(Re(polyroot(x))[abs(Im(polyroot(x))) < .Machine$double.eps^0.5])^-1 - 1
irr <- function(x)
{
if(all(x >= 0) | all(x <=0))
stop('Tous les flux financiers sont du même signe')
(Re(polyroot(x))[abs(Im(polyroot(x))) < .Machine$double.eps^0.5])^(-1) - 1
}
irr(c(-10, -7, 5, 2, 12, 0, 11))
irr <- function(x)
{
if(all(x >= 0) | all(x <=0))
stop('Tous les flux financiers sont du même signe')
i <- (Re(polyroot(x))[abs(Im(polyroot(x))) < .Machine$double.eps^0.5])^(-1) - 1
i[i > -1]
}
irr(c(-10, -7, 5, 2, 12, 0, 11))
irr <- function(x)
{
if(all(x >= 0) | all(x <=0))
stop('Tous les flux financiers sont du même signe')
if(abs(Im(polyroot(x))) < .Machine$double.eps^0.5 > 1)
warning("Plus d'un changement de signe dans les flux nets, le taux de rendement peut ne pas être unique")
i <- (Re(polyroot(x))[abs(Im(polyroot(x))) < .Machine$double.eps^0.5])^(-1) - 1
i[i > -1]
}
irr <- function(x)
{
if(all(x >= 0) | all(x <=0))
stop('Tous les flux financiers sont du même signe')
if(sum(abs(Im(polyroot(x))) < .Machine$double.eps^0.5) > 1)
warning("Plus d'un changement de signe dans les flux nets, le taux de rendement peut ne pas être unique")
i <- (Re(polyroot(x))[abs(Im(polyroot(x))) < .Machine$double.eps^0.5])^(-1) - 1
i[i > -1]
}
irr(c(-10, 5, 2, 12, -7, 0, 11))
secante <- function(FUN, x0, x1, MAX.ITER = 100, TOL = 1E-6, echo = FALSE)
{
if(echo)
{
expr1 <- expression(print(xn <- x1))
expr2 <- expression(print(x1 <- x0))
}
else
{
expr1 <- expression(xn <- x1)
expr2 <- expression(x1 <- x0)
}
i <- 0
repeat
{
eval(expr1)
xn <- x1 - (FUN(x1) * (x1 - x0))/(FUN(x1) - FUN(x0))
if(abs(x1 - xn)/abs(x1) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum number of iterations reached without convergence')
}
list(root = xn, nb.iter = i)
}
secante <- function(FUN, x0, x1, MAX.ITER = 100, TOL = 1E-6, echo = FALSE)
{
if(echo)
{
expr1 <- expression(print(xn <- x1))
expr2 <- expression((x1 <- x0))
}
else
{
expr1 <- expression(xn <- x1)
expr2 <- expression(x1 <- x0)
}
i <- 0
repeat
{
eval(expr1)
eval(expr2)
xn <- x1 - (FUN(x1) * (x1 - x0))/(FUN(x1) - FUN(x0))
if(abs(x1 - xn)/abs(x1) < TOL)
break
if(MAX.ITER < (i <- i + 1))
stop('Maximum number of iterations reached without convergence')
}
list(root = xn, nb.iter = i)
}
x <- rgamma(5, 2.2, 1)
x
y <- rpois(5, x)
y
curve(rbeta(shape1 = 10, shape2 = 15))
library(shiny)
setwd("~/Desktop/Université/Hiver 2020/ACT-2002/Laboratoire_Shiny")
library(shiny)
library(shiny)
runExample("01_Hello")
runApp("TCL")
runApp("LabShiny")
runApp("LabShiny")
runApp("LabShiny")
