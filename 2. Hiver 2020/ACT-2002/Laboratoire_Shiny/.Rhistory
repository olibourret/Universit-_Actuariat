library(shiny)
library(shiny)
runApp("Test")
setwd("~/Desktop/Université/Hiver 2020/ACT-2002/Laboratoire_Shiny")
runApp("shortfall")
a <- matrix(c(3, 8, 0, -1), nrow = 2)
eigen(a)
a
eigen(a)
eigen(a[,1])
opdt
library(RSKC)
data(optd, package = "RSKC")
opdt
optd.acp <- prcomp(optd, center = TRUE, scale. = FALSE)
optd.coord <- predict(optd.acp, newdata = optd)
par(mar = c(5.1, 4.1, 2.1, 2.1))
plot(x= optd.coord[, 1], y = optd.coord[, 2], type = "n",
xlab = expression(Y[1]), ylab = expression(Y[2]))
text(x= optd.coord[, 1], y = optd.coord[, 2],
labels = rownames(optd), cex = 0.5,
col = rainbow(10)[as.numeric(rownames(optd)) +1])
rect(-8, -30, 10, -16, lty = 2, border = "gray")
optd.acp
optd.coord
optd
plot(x= optd.coord[, 1], y = optd.coord[, 64], type = "n",
xlab = expression(Y[1]), ylab = expression(Y[2]))
text(x= optd.coord[, 1], y = optd.coord[, 64],
labels = rownames(optd), cex = 0.5,
col = rainbow(10)[as.numeric(rownames(optd)) +1])
rect(-8, -30, 10, -16, lty = 2, border = "gray")
plot(x= optd.coord[, 1], y = optd.coord[, 64], type = "n",
xlab = expression(Y[1]), ylab = expression(Y[64]))
text(x= optd.coord[, 1], y = optd.coord[, 64],
labels = rownames(optd), cex = 0.5,
col = rainbow(10)[as.numeric(rownames(optd)) +1])
rect(-8, -30, 10, -16, lty = 2, border = "gray")
optd.acp <- prcomp(optd, center = TRUE, scale. = FALSE)
optd.coord <- predict(optd.acp, newdata = optd)
par(mar = c(5.1, 4.1, 2.1, 2.1))
plot(x= optd.coord[, 1], y = optd.coord[, 64], type = "n",
xlab = expression(Y[1]), ylab = expression(Y[64]))
text(x= optd.coord[, 1], y = optd.coord[, 64],
labels = rownames(optd), cex = 0.5,
col = rainbow(10)[as.numeric(rownames(optd)) +1])
rect(-8, -30, 10, -16, lty = 2, border = "gray")
optd.acp <- prcomp(optd, center = TRUE, scale. = FALSE)
optd.coord <- predict(optd.acp, newdata = optd)
par(mar = c(5.1, 4.1, 2.1, 2.1))
plot(x= optd.coord[, 1], y = optd.coord[, 2], type = "n",
xlab = expression(Y[1]), ylab = expression(Y[2]))
text(x= optd.coord[, 1], y = optd.coord[, 2],
labels = rownames(optd), cex = 0.5,
col = rainbow(10)[as.numeric(rownames(optd)) +1])
rect(-8, -30, 10, -16, lty = 2, border = "gray")
t <- matrix(c(-8.640, 0.101, 1.997, -1.095), nrow = 2)
t
eigen(t)
solve(t)
p <- eigen(t)
p
e$solve(t)
solve(p$vectors)
invP<- solve(p$vectors)
invP%*%t%*%p
p
p1 <- p$vectors
p1
invP%*%t%*%p1
invP%*%p1
d <- invP%*%t%*%p1
e^d
exp(d)
a <- matrix(c( 1, 2, 3, 4), nrow = 2)
a
exp(a)
diag(a)
diag(diag(a))
diag(exp(d))
diag(diag(exp(d)))
pi <- c(0.5614, 0.4386)
e <- matrix(c(1,1), nrow = 1)
e
e <- matrix(c(1,1), ncol = 1)
e
b <- diag(diag(exp(d)))
pi%*%b%*%e
1 - pi%*%b%*%e
library(actuar)
1 - pi%*%p1%*%b%*%invP%*%e
pphtype(1, c(0.5614, 0.4386), matrix(c(-8.640, 0.101, 1.997, -1.095), nrow = 2))
2*t
p <- eigen(2*t)
d <- invP%*%2*t%*%p1
p <- eigen(2*t)
p1 <- p$vectors
invP<- solve(p$vectors)
d <- invP%*%2*t%*%p1
d <- invP%*%(2*t)%*%p1
1 - pi%*%p1%*%b%*%invP%*%e
pphtype(2, c(0.5614, 0.4386), matrix(c(-8.640, 0.101, 1.997, -1.095), nrow = 2))
t <- matrix(c(-8.640, 0.101, 1.997, -1.095), nrow = 2)
2*t
p <- eigen(2*t)
p1 <- p$vectors
invP<- solve(p$vectors)
d <- invP%*%(2*t)%*%p1
1 - pi%*%p1%*%b%*%invP%*%e
pphtype(2, c(0.5614, 0.4386), matrix(c(-17.280, 0.202, 3.994, -2.190), nrow = 2))
pphtype(2, c(0.5614, 0.4386), matrix(c(-8.640, 0.101, 1.997, -1.095), nrow = 2))
t <- matrix(c(-8.640, 0.101, 1.997, -1.095), nrow = 2)
p <- eigen(t)
p1 <- p$vectors
invP<- solve(p$vectors)
d <- invP%*%t%*%p1
m <- 2*t
m
p <- eigen(m)
p
p1 <- p$vectors
invP<- solve(p$vectors)
d <- invP%*%m%*%p1
pi <- c(0.5614, 0.4386)
e <- matrix(c(1,1), ncol = 1)
1 - pi%*%p1%*%b%*%invP%*%e
b <- diag(diag(exp(d)))
1 - pi%*%p1%*%b%*%invP%*%e
T
square <- function(x) x * x
simpson <- function(FUN, lower, upper, subdivisions = 1000)
{
if (upper < lower) stop("la borne lower doit être inférieure à la borne upper")
if (identical(lower, upper)) return(0)
else
{
h <- (upper - lower) / (2 * subdivisions)
h / 3 * (FUN(lower) + 2 * sum(FUN(lower + 2 * h * seq(subdivisions - 1))) +
4 * sum(FUN(lower + h * (2 * seq(subdivisions) - 1))) + FUN(upper))
}
}
ICsimp <- 2 * simpson(dnorm, 0, 1.84)
x <- runif(10000, 0, 1.84)
ICmc <- 2 * 1.84 / 10000 * sum(1 / sqrt(2 * pi) * exp(-x^2 / 2))
ICint <- integrate(dnorm, -1.84, 1.84)[[1]]
ICpn <- 2 * pnorm(1.84) - 1
square <- function(x) x * x
simpson <- function(FUN, lower, upper, subdivisions = 1000)
{
if (upper < lower) stop("la borne lower doit être inférieure à la borne upper")
if (identical(lower, upper)) return(0)
else
{
h <- (upper - lower) / (2 * subdivisions)
h / 3 * (FUN(lower) + 2 * sum(FUN(lower + 2 * h * seq(subdivisions - 1))) +
4 * sum(FUN(lower + h * (2 * seq(subdivisions) - 1))) + FUN(upper))
}
}
ICsimp <- 2 * simpson(dnorm, 0, 1.84)
x <- runif(10000, 0, 1.84)
ICmc <- 2 * 1.84 / 10000 * sum(1 / sqrt(2 * pi) * exp(-x^2 / 2))
ICint <- integrate(dnorm, -1.84, 1.84)[[1]]
ICpn <- 2 * pnorm(1.84) - 1
x <- runif(100000, 0, 1.84)
ICmc <- 2 * 1.84 / 100000 * sum(1 / sqrt(2 * pi) * exp(-x^2 / 2))
x <- runif(1000000, 0, 1.84)
ICmc <- 2 * 1.84 / 1000000 * sum(1 / sqrt(2 * pi) * exp(-x^2 / 2))
x <- runif(10000000, 0, 1.84)
ICmc <- 2 * 1.84 / 10000000 * sum(1 / sqrt(2 * pi) * exp(-x^2 / 2))
library(actuar)
# Attribution des valeurs données.
prob <- c(0.5614, 0.4386)
e <- matrix(1, nrow = 2, ncol = 1)
rates <- matrix(c(-8.64, 0.101, 1.997, -1.095), ncol = 2)
#Valeur de x dans la fonction de répartition.
x <- 1
# Poser la matrice M comme étant le produit scalaire de T avec x.
M <- rates * x
# Trouver les valeurs propres de la matrice M.
P <- eigen(M)$vectors
# Trouver l'inverse de la matrice P soit P^(-1).
invP <- solve(P)
# Trouver la diagonalisation de la matrice M.
D <- invP %*% M %*% P
# Calculer l'exponentielle de D en conservant uniquement les éléments de la diagonale soit e^D.
# Les erreurs de troncatures d'ordre d'environ E^-17 sont donc retirés.
expD <- diag(diag(exp(D)))
# Réponse de la fonction de répartition F(x).
1 - pi %*% P %*% expD %*% invP %*% e
# Validation de la réponse avec la fonction pphytpe.
pphtype(x, prob, rates)
library(actuar)
# Attribution des valeurs données.
probs <- c(0.5614, 0.4386)
e <- matrix(1, nrow = 2, ncol = 1)
rates <- matrix(c(-8.64, 0.101, 1.997, -1.095), ncol = 2)
#Valeur de x dans la fonction de répartition.
x <- 1
# Poser la matrice M comme étant le produit scalaire de T avec x.
M <- rates * x
# Trouver les valeurs propres de la matrice M.
P <- eigen(M)$vectors
# Trouver l'inverse de la matrice P soit P^(-1).
invP <- solve(P)
# Trouver la diagonalisation de la matrice M.
D <- invP %*% M %*% P
# Calculer l'exponentielle de D (e^D) en conservant uniquement les éléments de la diagonale.
# Les exp(0) = 1 qui ne sont pas sur la diagonale sont ainsi remplacés par 0.
expD <- diag(diag(exp(D)))
# Réponse de la fonction de répartition F(x).
1 - probs %*% P %*% expD %*% invP %*% e
# Validation de la réponse avec la fonction pphytpe.
pphtype(x, probs, rates)
eigen(M)
D
eigen(M)$values
diag(eigen(M)$values)
square <- function(x) x * x
simpson <- function(FUN, lower, upper, subdivisions = 1000)
{
if (upper < lower) stop("la borne lower doit être inférieure à la borne upper")
if (identical(lower, upper)) return(0)
else
{
h <- (upper - lower) / (2 * subdivisions)
h / 3 * (FUN(lower) + 2 * sum(FUN(lower + 2 * h * seq(subdivisions - 1))) +
4 * sum(FUN(lower + h * (2 * seq(subdivisions) - 1))) + FUN(upper))
}
}
ICsimp <- 2 * simpson(dnorm, 0, 1.84)
x <- runif(10000000, 0, 1.84)
ICmc <- 2 * 1.84 / 10000000 * sum(1 / sqrt(2 * pi) * exp(-x^2 / 2))
ICint <- integrate(dnorm, -1.84, 1.84)[[1]]
ICpn <- 2 * pnorm(1.84) - 1
library(actuar)
# Attribution des valeurs données.
probs <- c(0.5614, 0.4386)
e <- matrix(1, nrow = 2, ncol = 1)
rates <- matrix(c(-8.64, 0.101, 1.997, -1.095), ncol = 2)
# Valeur de x dans la fonction de répartition.
x <- 1
# Poser la matrice M comme étant le produit scalaire de T avec x.
M <- rates * x
# Trouver les vecteurs propres de la matrice M.
P <- eigen(M)$vectors
# Trouver l'inverse de la matrice P soit P^(-1).
invP <- solve(P)
# Trouver la diagonalisation de la matrice M.
D <- invP %*% M %*% P
# Calculer l'exponentielle de D (e^D) en conservant uniquement les éléments de
# la diagonale. Les exp(0) = 1 qui ne sont pas sur la diagonale sont ainsi remplacés par 0.
expD <- diag(diag(exp(D)))
# Réponse de la fonction de répartition F(x).
1 - probs %*% P %*% expD %*% invP %*% e
# Validation de la réponse avec la fonction pphytpe.
pphtype(x, probs, rates)
