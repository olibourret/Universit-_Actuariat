x <- numeric(n+1)
x[1] <- seed
for(i in seq(n))
x[i+1] <- (a * x[i] + c) %% m
x[-1]
}
rand(3, a=65, c=1, m=2048, seed=12)
rand(3, a=65, c=1, m=2048, seed=12)
rand <- function(n, a, c, m, seed)
{
x <- numeric(n+1)
x[1] <- seed
for(i in seq(n))
x[i+1] <- (a * x[i] + c) %% m
x[-1]/1000
}
rand(3, a=65, c=1, m=2048, seed=12)
rand <- function(n, a, c, m, seed)
{
x <- numeric(n+1)
x[1] <- seed
for(i in seq(n))
x[i+1] <- (a * x[i] + c) %% m
x[-1]/2048
}
rand(3, a=65, c=1, m=2048, seed=12)
x <- rand(3, a=65, c=1, m=2048, seed=12)
alpha <- 2
lambda <- 1000
ans <- (lambda^alpha)/( 1 - runif(3, 0, 1))
ans <- (lambda)/(( 1 - x)^(1/alpha)
ans <- (lambda)/(( 1 - x)^(1/alpha)
ans <- lambda/(( 1 - x )^(1 / alpha))
rgamma3 <- function(nsim, alpha, lambda)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- ((alpha-1/(6*alpha)*u[1])/((alpha-1)*u[2]))
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log( u[2] )) / (a - 1) + v - log(v) <=1)
x[i <- i+1] <- (alpha - 1) * v
}
x/lambda
}
hist(rgamma3(1000,5,8), prob = TRUE)
curve(dgamma(x,5,8), add=TRUE)
rgamma3 <- function(nsim, alpha, lambda)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- ((alpha-1/(6*alpha)*u[1])/((alpha-1)*u[2]))
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log( u[2] )) / (a - 1) + v - log(v) <=1)
x[i <- i+1] <- (alpha - 1) * v
}
x/lambda
}
hist(rgamma3(1000,5,8), prob = TRUE)
rgamma3 <- function(nsim, alpha, lambda)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- ((alpha-1/(6*alpha)*u[1])/((alpha-1)*u[2]))
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log( u[2] )) / (alpha - 1) + v - log(v) <=1)
x[i <- i+1] <- (alpha - 1) * v
}
x/lambda
}
hist(rgamma3(1000,5,8), prob = TRUE)
curve(dgamma(x,5,8), add=TRUE)
rgamma2 <- function(nsim, alpha)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- ((alpha-1/(6*alpha)*u[1])/((alpha-1)*u[2]))
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log( u[2] )) / (a - 1) + v - log(v) <=1)
x[i <- i+1] <- (alpha - 1) * v
}
x
}
hist(rgamma2(1000, 5), prob = TRUE)
curve(dgamma(x,5,1), add = TRUE)
rgamma2 <- function(nsim, alpha)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- ((alpha-1/(6*alpha)*u[1])/((alpha-1)*u[2]))
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log( u[2] )) / (a - 1) + v - log(v) <=1)
x[i <- i+1] <- (alpha - 1) * v
}
x
}
hist(rgamma2(1000, 5), prob = TRUE)
rgamma2 <- function(nsim, alpha)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- ((alpha-1/(6*alpha)*u[1])/((alpha-1)*u[2]))
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log( u[2] )) / (alpha - 1) + v - log(v) <=1)
x[i <- i+1] <- (alpha - 1) * v
}
x
}
hist(rgamma2(1000, 5), prob = TRUE)
rgamma2 <- function(nsim, alpha)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- ((alpha-1/(6*alpha)*u[1])/((alpha-1)*u[2]))
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log(u[2]) / (alpha - 1) + v - log(v) <=1))
x[i <- i+1] <- (alpha - 1) * v
}
x
}
hist(rgamma2(1000, 5), prob = TRUE)
rgamma2(1000, 5)
rgamma2(1, 5)
rgamma2 <- function(nsim, alpha)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- (alpha-1/(6*alpha)) *u[1] / ((alpha-1)*u[2]))
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log(u[2]) / (alpha - 1) + v - log(v) <=1))
x[i <- i+1] <- (alpha - 1) * v
}
x
}
rgamma2 <- function(nsim, alpha)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- (alpha-1/(6*alpha)) *u[1] / ((alpha-1)*u[2])
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log(u[2]) / (alpha - 1) + v - log(v) <=1))
x[i <- i+1] <- (alpha - 1) * v
}
x
}
hist(rgamma2(1000, 5), prob = TRUE)
curve(dgamma(x,5,1), add = TRUE)
hist(rgamma2(1000, 5,2), prob = TRUE)
curve(dgamma(x,5,2), add = TRUE)
rgamma2 <- function(nsim, alpha, lambda)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- (alpha-1/(6*alpha)) *u[1] / ((alpha-1)*u[2])
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log(u[2]) / (alpha - 1) + v - log(v) <=1))
x[i <- i+1] <- (alpha - 1) * v
}
x/lambda
}
hist(rgamma2(1000, 5,2), prob = TRUE)
curve(dgamma(x,5,2), add = TRUE)
f <- function(x) x^2.2*exp(-x/10)
op <- par(mfrow = c(2, 2))
op <- par(mfrow = c(2, 2))
curve(f(x), xlim = c(2,5), lwd = 2, main = "Vraie fonction")
curve(f(x), xlim = c(2,5), lwd = 2, main = "Vraie fonction")
curve(f(x), xlim = c(2,5), lwd = 2, main = "Vraie fonction")
curve(f(x), xlim = c(2,5), lwd = 2, main = "Vraie fonction")
op <- par(mfrow = c(1, 1))
curve(f(x), xlim = c(2,5), lwd = 2, main = "Vraie fonction")
randbeta <- function(n, alpha, beta)
{
x <- numeric(n)
i <- 0
while(i<n)
{
y1 <- rgamma(1, alpha, 1)
y2 <- rgamma(1, beta, 1)
x[i <- i+1] <- y1 / (y1+y2)
}
x
}
hist(randbeta(1000, 5, 3), prob = TRUE)
curve(rbeta(x, 5, 3), add = TRUE)
(y <- rgamma((1, alpha, 1))/(y+ rgamma(1, beta, 1))
(y <- rgamma(1, alpha, 1))/(y+ rgamma(1, beta, 1))
(y <- rgamma(1, 5, 1))/(y + rgamma(1, 3, 1))
hist(randbeta(1000, 5, 2), prob = TRUE)
curve(rbeta(x, 5, 2), add = TRUE)
hist(randbeta(1000, 5, 2), prob = TRUE)
curve(dbeta(x, 5, 2), add = TRUE)
dbeta(1.5, 3,2)
dbeta(2/3, 3,2)
rbeta.ar2 <- function(n)
{
g <- function(x)
ifelse(x < 0.8, 2.5 * x, 10 - 10 * x)
Ginv <- function(y)
ifelse(y < 0.8, sqrt(0.8 * y), 1 - sqrt(0.2 - 0.2 * y))
x <- numeric(n)
i <- 0
while(i < n)
{
y <- Ginv(runif(1))
if(1.2 * g(y) *runif(1) <= dbeta(y, shape1 = 3, shape2 = 2))
x[i <- i + 1] <- y
}
x
}
x <- rbeta.ar2(10000)
hist(x, prob = TRUE)
curve(dbeta(x,3,2), add=TRUE)
dbeta(1/3,2,3)
dbeta(0.72,2,3)
dbeta(0.88,2,3)
dbeta(0.76,2,3)
dbeta(0.89,2,3)
dbeta(0.49,2,3)
dbeta(0.46,2,3)
dbeta(0.17,2,3)
library(actuar)
library(actuar)
rmixture(10, 0.5, expression(rexp(3), rexp(7)))
rmixture(12, 0.5, expression(rexp(3), rexp(7), rexp(5)))
rmixture(10000, c(0.55,0.45), expression(rlnorm(3.6, 0.6), rlnorm(4.5, 0.3)))
x <- rmixture(10000, c(0.55,0.45), expression(rlnorm(3.6, 0.6), rlnorm(4.5, 0.3)))
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6), 0.45*dlnorm(x, 4.5, 0.3))
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6), 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6) + 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6) + 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
hist(x, prob = TRUE)
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6) + 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6) + 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
library(actuar)
x <- rmixture(10000, c(0.55,0.45), expression(rlnorm(3.6, 0.6), rlnorm(4.5, 0.3)))
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6) + 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
x <- rmixture(10000, c(0.55,0.45), expression(rlnorm(3.6, 0.6), rlnorm(4.5, 0.3)))
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6) + 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
x <- rmixture(10000, c(0.55,0.45), expression(rlnorm(3.6, 0.6), rlnorm(4.5, 0.3)))
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6) + 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
x <- rmixture(10000, c(0.55,0.45), expression(rlnorm(3.6, 0.6), rlnorm(4.5, 0.3)))
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6) + 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
x <- rmixture(10000, c(0.55,0.45), expression(rlnorm(3.6, 0.6), rlnorm(4.5, 0.3)))
hist(x, prob = TRUE)
curve(0.55*dlnorm(x, 3.6, 0.6) + 0.45*dlnorm(x, 4.5, 0.3), add = TRUE, lwd = 2, col = "red3")
rmixture(1000, c(0.3, 0.7), expression(rexp(2), rgamma(2, 1/3)))
hist(x, prob = TRUE)
curve(0.7*dexp(x, 2) + 0.3*dgamma(x, 2, 1/3), add = TRUE, lwd = 2, col = "red3")
hist(x, prob = TRUE)
curve(0.3*dexp(x, 2) + 0.7*dgamma(x, 2, 1/3), add = TRUE, lwd = 2, col = "red3")
x <- rmixture(1000, c(0.3, 0.7), expression(rexp(2), rgamma(2, scale=3)))
hist(x, prob = TRUE)
curve(0.3*dexp(x, 2) + 0.7*dgamma(x, 2, scale=3), add = TRUE, lwd = 2, col = "red3")
x <- rmixture(1000, c(0.3, 0.7), expression(rexp(2), rgamma(2, scale=3)))
hist(x, prob = TRUE)
curve(0.3*dexp(x, 2) + 0.7*dgamma(x, 2, scale=3), add = TRUE, lwd = 2, col = "red3")
x <- rmixture(1000, c(0.3, 0.7), expression(rexp(2), rgamma(2, scale=3)))
hist(x, prob = TRUE)
curve(0.3*dexp(x, 2) + 0.7*dgamma(x, 2, scale=3), add = TRUE, lwd = 2, col = "red3")
x <- rmixture(100000, c(0.3, 0.7), expression(rexp(2), rgamma(2, scale=3)))
hist(x, prob = TRUE)
curve(0.3*dexp(x, 2) + 0.7*dgamma(x, 2, scale=3), add = TRUE, lwd = 2, col = "red3")
rand <- function(n, a, c, m, seed)
{
x <- numeric(n+1)
x[1] <- seed
for(i in seq(n))
x[i+1] <- (a * x[i] + c) %% m
x[-1]/2048
}
x <- rand(3, a=65, c=1, m=2048, seed=12)
alpha <- 2
lambda <- 1000
ans <- lambda/(( 1 - x )^(1 / alpha))
rparetooli <- function(nsim, alpha, lambda)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
x[i <- i + 1] <- rexp(1, rgamma(1, alpha, lambda))
}
x
}
hist(rparetooli(10000, 8, 1), prob = TRUE)
curve(dpareto(x,8,1), add =TRUE)
rgamma3 <- function(nsim, alpha, lambda)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- ((alpha-1/(6*alpha)*u[1])/((alpha-1)*u[2]))
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log( u[2] )) / (alpha - 1) + v - log(v) <=1)
x[i <- i+1] <- (alpha - 1) * v
}
x/lambda
}
hist(rgamma3(1000,5,8), prob = TRUE)
curve(dgamma(x,5,8), add=TRUE)
rgamma2 <- function(nsim, alpha, lambda)
{
x <- numeric(nsim)
i <- 0
while(i < nsim)
{
u <- runif(2)
v <- (alpha-1/(6*alpha)) *u[1] / ((alpha-1)*u[2])
if((2 * (u[2] - 1) / (alpha-1) + v + 1/v <= 2) | (2*log(u[2]) / (alpha - 1) + v - log(v) <=1))
x[i <- i+1] <- (alpha - 1) * v
}
x/lambda
}
hist(rgamma2(1000, 5,2), prob = TRUE)
curve(dgamma(x,5,2), add = TRUE)
u1 <- runif(500)
u2 <- runif(500)
x1 <- outer(u1 , u2, function(x,y)
sqrt((-2*log(x)))*cos(2*pi*y))
x2 <- outer(u1 , u2, function(x,y)
sqrt((-2*log(x)))*sin(2*pi*y))
hist(x1, prob=TRUE)
curve(dnorm(x), add=TRUE)
hist(x2, prob=TRUE)
curve(dnorm(x), add=TRUE)
rbeta.ar2 <- function(n)
{
g <- function(x)
ifelse(x < 0.8, 2.5 * x, 10 - 10 * x)
Ginv <- function(y)
ifelse(y < 0.8, sqrt(0.8 * y), 1 - sqrt(0.2 - 0.2 * y))
x <- numeric(n)
i <- 0
while(i < n)
{
y <- Ginv(runif(1))
if(1.2 * g(y) *runif(1) <= dbeta(y, shape1 = 3, shape2 = 2))
x[i <- i + 1] <- y
}
x
}
x <- rbeta.ar2(10000)
hist(x, prob = TRUE)
curve(dbeta(x,3,2), add=TRUE)
feu <- rcomppois(1e6, 0.003, rlnorm(meanlog = 7, sdlog = 1))
feu <- rcomppois(1e6, 0.003, rlnorm(1e6, meanlog = 7, sdlog = 1))
feu <- rcomppois(1e6, 0.003, rlnorm(meanlog = 7, sdlog = 1))
feu <- rcomppois(1e6, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))
feu
eau <- rcomppois(1e6, 0.050, rpareto(shape = 4, scale =  4500))
eau
bris <- rcomppois(1e6, rgamma(shape = 2.5, scale = 0.01))
bris <- rcomppois(1e6, lambda = 0.080, rgamma(shape = 2.5, scale = 0.01))
bris
Sf <- rcomppois(1e6, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))
Se <- rcomppois(1e6, lambda = 0.050, rpareto(shape = 4, scale =  4500))
Sb <- rcomppois(1e6, lambda = 0.080, rgamma(shape = 2.5, scale = 0.01))
S <- Sf + Se + Sb
S
Sf <- rcomppois(1000000, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))
Se <- rcomppois(1000000, lambda = 0.050, rpareto(shape = 4, scale =  4500))
Sb <- rcomppois(1000000, lambda = 0.080, rgamma(shape = 2.5, scale = 0.01))
S <- Sf + Se + Sb
S
Sf
Se
Sb
Sb <- rcomppois(1000000, lambda = 0.080, rgamma(shape = 2.5, rate = 0.01))
Sb
S <- Sf + Se + Sb
S
s[s > 0]
S[S > 0]
length(S[S > 0])/1e6
mean(S)
lambda <- 0.003 + 0.050 + 0.080
Sf <- rcomppois(1000000, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))/lambda
Se <- rcomppois(1000000, lambda = 0.050, rpareto(shape = 4, scale =  4500))/lambda
Sb <- rcomppois(1000000, lambda = 0.080, rgamma(shape = 2.5, rate = 0.01))/lambda
S <- Sf + Se + Sb
S
lambda
Sf <- rcomppois(1000000, lambda = 0.003/0.133, rlnorm(meanlog = 7, sdlog = 1))
Se <- rcomppois(1000000, lambda = 0.050/0.133, rpareto(shape = 4, scale =  4500))
Sb <- rcomppois(1000000, lambda = 0.080/0.133, rgamma(shape = 2.5, rate = 0.01))
S <- Sf + Se + Sb
S
Sf <- rcomppois(1000000, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))
Se <- rcomppois(1000000, lambda = 0.050, rpareto(shape = 4, scale =  4500))
Sb <- rcomppois(1000000, lambda = 0.080, rgamma(shape = 2.5, rate = 0.01))
S <- Sf + Se + Sb
S
length(S[S > 0])/1e6
Sf <- rcomppois(1000000, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))
Se <- rcomppois(1000000, lambda = 0.050, rpareto(shape = 4, scale =  4500))
Sb <- rcomppois(1000000, lambda = 0.080, rgamma(shape = 2.5, rate = 0.01))
S <- Sf + Se + Sb
S
length(S[S > 0])/1e6
lambda
Sf <- rcomppois(1000000, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))
Se <- rcomppois(1000000, lambda = 0.050, rpareto(shape = 4, scale =  4500))
Sb <- rcomppois(1000000, lambda = 0.080, rgamma(shape = 2.5, rate = 0.01))
S <- Sf + Se + Sb
S
length(S[S > 0])/1e6
Sf <- rcomppois(1000000, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))
Se <- rcomppois(1000000, lambda = 0.050, rpareto(shape = 4, scale =  4500))
Sb <- rcomppois(1000000, lambda = 0.080, rgamma(shape = 2.5, rate = 0.01))
S <- Sf + Se + Sb
S
length(S[S > 0])/1e6
Sf <- rcomppois(1000000, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))
Se <- rcomppois(1000000, lambda = 0.050, rpareto(shape = 4, scale =  4500))
Sb <- rcomppois(1000000, lambda = 0.080, rgamma(shape = 2.5, rate = 0.01))
S <- Sf + Se + Sb
S
length(S[S > 0])/1e6
Sf <- rcomppois(1e7, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))
Se <- rcomppois(1e7, lambda = 0.050, rpareto(shape = 4, scale =  4500))
Sb <- rcomppois(1e7, lambda = 0.080, rgamma(shape = 2.5, rate = 0.01))
S <- Sf + Se + Sb
S
length(S[S > 0])/1e7
mean(S)
quantile(S, 0.75, type = 1)
mean(S[S > quantile(S, 0.75, type = 1)])
mean(S[S > quantile(S, 0.95, type = 1)])
quantile(S, 0.95, type = 1)
S[S > quantile(S, 0.99, type = 1)]
max(S)
qgamma(0.95, shape = 5, rate = 20)
Sf <- rcomppois(1e7, lambda = 0.003, rlnorm(meanlog = 7, sdlog = 1))  # Calcul de 10 millions de cas de réclamations possibles pour le feu
Se <- rcomppois(1e7, lambda = 0.050, rpareto(shape = 4, scale =  4500)) # Calcul de 10 millions de cas de réclamations possibles pour l'eau
Sb <- rcomppois(1e7, lambda = 0.080, rgamma(shape = 2.5, rate = 0.01)) # Calcul de 10 millions de cas de réclamations possibles pour le bris accidentel
S <- Sf + Se + Sb # Somme des trois Poisson composées
mean(S) # Calcul de la prime pure
mean(S[S > quantile(S, 0.75, type = 1)]) # Calcul de la prime de chargement de sécurité.
1.2+1.4+2.8
1.2+1.4+2.8==5.4
2.8+1.2+1.4
2.8+1.2+1.4==5.4
2.6-1.4-1.2
2.6-1.5-1.1
0.2/0.1==2
(1.2-1.0)/0.1 ==2
0.3/0.1
0.3/0.1==3
3.2-3.15>0.05
3.15-3.1<0.5
3.2-3.15<0.05
(a <- seq(0.9,0.95, by= 0.01))
a==0.94
(b <- c(0.90, 0.91, 0.92, 0.93, 0.94, 0.95))
b==0.94
a-b
library(rmarkdown)
setwd("~/Desktop/laboratoire-rmarkdown")
library(rmarkdown)
library(rmarkdown)
render("exercice-introduction.Rmd", encoding = "UTF-8")
render("exercice-introduction.Rmd", encoding = "UTF-8")
render("exercice-introduction.Rmd", encoding = "UTF-8")
render("exercice-introduction.Rmd", encoding = "UTF-8")
render("exercice-configuration.Rmd", encoding = "UTF-8")
render("exercice-configuration.Rmd", encoding = "UTF-8")
alpha <- 3
l
lambda <- 0.1
alpha <- 3
lambda <- 0.1
ExT <- integrate(function(x) x * dgamma(x, shaphe = alpha, rate = lambda), lower = 0, upper = Inf)$value
ExT <- integrate(function(x) x * dgamma(x, shape = alpha, rate = lambda), lower = 0, upper = Inf)$value
ExT
nb.sim <- 1e6
x <- rgamma(nb.sim, alpha, rate = lambda)
ExE <- round(mean(x), 4)
ExE
arrayInd(14, c(4,5))
arrayInd(8, 3:5)
arrayInd(c(8, 13, 59), 3:5)
