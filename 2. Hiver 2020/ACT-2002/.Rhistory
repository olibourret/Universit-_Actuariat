A <- I %*% A
L <- L %*% solve(I)
}
if(j > k)
{
I[i] <- -A[i]
A <- I %*% A
L <- L %*% solve(I)
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
A
L
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
solve(Mat.Ech(A))
A %*% solve(Mat.Ech(A))
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
while(i <= n^2)
{
I <- diag(n)
if(j == k & A(i) != 0)
{
I[i] <- 1/A[i]
A <- I %*% A
}
if(j > k)
{
I[i] <- -A[i]
A <- I %*% A
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
A
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
A %*% solve(Mat.Ech(A))
Mat.Ech(A)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
while(i <= n^2)
{
I <- diag(n)
if(j == k & A[i] != 0)
{
I[i] <- 1/A[i]
A <- I %*% A
}
if(j > k)
{
I[i] <- -A[i]
A <- I %*% A
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
A
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
while(i <= n^2)
{
I <- diag(n)
if(j == k & A[i] != 0)
{
I[i] <- 1/A[i]
A <- I %*% A
}
if(j > k)
{
I[i] <- -A[i]
A <- I %*% A
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
A
A %*% solve(A)
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
while(i <= n^2)
{
I <- diag(n)
if(j == k & A[i] != 0)
{
I[i] <- 1/A[i]
A <- I %*% A
}
if(j > k)
{
I[i] <- -A[i]
A <- I %*% A
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
list("Matrice U" = A, "Matrice L" = A %*% solve(A))
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
X <- A
while(i <= n^2)
{
I <- diag(n)
if(j == k & X[i] != 0)
{
I[i] <- 1/X[i]
X <- I %*% X
}
if(j > k)
{
I[i] <- -X[i]
X <- I %*% X
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
list("Matrice U" = X, "Matrice L" = X %*% solve(A))
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
while(i <= n^2)
{
I <- diag(n)
if(j == k)
{
I[i] <- 1/A[i]
A <- I %*% A
}
if(j > k)
{
I[i] <- -A[i]
A <- I %*% A
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
A
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
A %*% solve(Mat.Ech(A))
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
X <- A
while(i <= n^2)
{
I <- diag(n)
if(j == k & X[i] != 0)
{
I[i] <- 1/X[i]
X <- I %*% X
}
if(j > k)
{
I[i] <- -X[i]
X <- I %*% X
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
X
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
A %*% solve(Mat.Ech(A))
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
X <- A
while(i <= n^2)
{
I <- diag(n)
if(j == k & X[i] != 0)
{
I[i] <- 1/X[i]
X <- I %*% X
}
if(j > k)
{
I[i] <- -X[i]
X <- I %*% X
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
list("Matrice U" = X,
"Matrice L" = A %*% solve(X))
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
A <- matrix(c(1, 2, -1, 6, 4, 2, 4, -1, 5), nrow = 3)
Mat.Ech(A)
apply(A, 1, sum)
r <- apply(A, 1, sum)
r[r==0]
r[r==11]
dep <- apply(X, 1, sum)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
X <- A
while(i <= n^2)
{
I <- diag(n)
if(j == k & X[i] != 0)
{
I[i] <- 1/X[i]
X <- I %*% X
}
if(j > k)
{
I[i] <- -X[i]
X <- I %*% X
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
dep <- apply(X, 1, sum)
if(dep == 0)
{
X
}
list("Matrice U" = X,
"Matrice L" = A %*% solve(X))
}
A <- matrix(c(1, 2, -1, 6, 4, 2, 4, -1, 5), nrow = 3)
Mat.Ech(A)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
X <- A
while(i <= n^2)
{
I <- diag(n)
if(j == k & X[i] != 0)
{
I[i] <- 1/X[i]
X <- I %*% X
}
if(j > k)
{
I[i] <- -X[i]
X <- I %*% X
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
dep <- apply(X, 1, sum)
if(dep == 0)
{
X
}
else
{
list("Matrice U" = X,
"Matrice L" = A %*% solve(X))
}
}
A <- matrix(c(1, 2, -1, 6, 4, 2, 4, -1, 5), nrow = 3)
Mat.Ech(A)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
X <- A
while(i <= n^2)
{
I <- diag(n)
if(j == k & X[i] != 0)
{
I[i] <- 1/X[i]
X <- I %*% X
}
if(j > k)
{
I[i] <- -X[i]
X <- I %*% X
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
if(apply())
list("Matrice U" = X,
"Matrice L" = A %*% solve(X))
}
A <- matrix(c(1, 2, -1, 6, 4, 2, 4, -1, 5), nrow = 3)
Mat.Ech(A)
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
X <- A
while(i <= n^2)
{
I <- diag(n)
if(j == k & X[i] != 0)
{
I[i] <- 1/X[i]
X <- I %*% X
}
if(j > k)
{
I[i] <- -X[i]
X <- I %*% X
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
list("Matrice U" = X,
"Matrice L" = A %*% solve(X))
}
A <- matrix(c(2, -3, 4, 6, -8, 9, 2, 0, 2), nrow = 3)
Mat.Ech(A)
setwd("~/Desktop")
library(shiny)
library(actuar)
runApp("shortfall")
runApp("shortfall")
runApp("shortfall")
runApp("shortfall")
runApp("shortfall")
runApp("shortfall")
runApp("shortfall")
setwd("~/Desktop/Université/Hiver 2020/ACT-2002/Laboratoire_Shiny")
runApp("LabShiny_OlivierBourret")
A <- matrix(c(3,-1,-1, 3, 2, 1, 2, 4, 3), nrow = 3)
Mat.Ech(A)
det(A)
A <- matrix(c(3,0,1, -3, 0,2,1,1, 0,1, 2, -4,0, 3,1,3), nrow = 4)
det(A)
Mat.Ech(A)
Mat.Ech <- function(A)
{
n <- nrow(A)
i <- 1
j <- 1
k <- 1
X <- A
while(i <= n^2)
{
I <- diag(n)
if(j == k)
{
I[i] <- 1/X[i]
X <- I %*% X
}
if(j > k)
{
I[i] <- -X[i]
X <- I %*% X
}
if(j == n) j <- 0
i <- i + 1
j <- j + 1
k <- ceiling(i/n)
}
list("Matrice U" = X,
"Matrice L" = A %*% solve(X))
}
A <- matrix(c(3,0,1, -3, 0,2,1,1, 0,1, 2, -4,0, 3,1,3), nrow = 4)
Mat.Ech(A)
eigen(A)
prod(eigen(A)$values)
A <- matrix(c(1,3,2,4), nrow = 2)
Mat.Ech(A)
solve(matrix(c(1,3,0,1), nrow=2))%A
solve(matrix(c(1,3,0,1), nrow=2))%*%A
## La fonction 'rcompound' permet de simuler des distributions
## composées générales où la distribution de fréquence est
## autre que la Poisson. Voici un exemple de binomiale
## négative composée.
rcompound(10, rnbinom(2, 0.2), rgamma(2, 1)) #
B <- matrix(c(1,3,2,3,-1,4,-3,11,-2), nrow = 3)
invB <- solve(B)
invB <- solve(B)
setwd("~/Desktop/Université/Hiver 2020/ACT-2002")
runApp("examen-final-h2020")
runApp("examen-final-h2020")
dpareto(4, 2,3)
dpareto(x, 2,3)
dpareto(c(0,1,2), 2,3)
runApp("examen-final-h2020")
runApp("examen-final-h2020")
runApp("examen-final-h2020")
runApp("examen-final-h2020")
list(2,3)
r <- list(2,3)
r[1]
runApp("examen-final-h2020")
runApp("examen-final-h2020")
cbind(c(1,2))
t <- cbind(c(1,2))
t
runApp("examen-final-h2020")
##  '...': arguments additionnels à passer aux fonctions
##    FUN et gradiant.
##
##  Valeur
##
##  Liste de deux éléments nommés:
##
##    roots: le vecteur des racines;
##    nb.iter: le nombre d'itérations.
##
nrmult <- function(FUN, gradiant, start, TOL = 1E-6,
maxiter = 100, echo = FALSE, ...)
{
if (echo)
expr <- expression(print(start <- start - adjust))
else
expr <- expression(start <- start - adjust)
i <- 0
repeat
{
adjust <- solve(gradiant(start, ...), FUN(start, ...))
if (max(abs(adjust)) < TOL)
break
if (maxiter < (i <- i + 1))
stop("Maximum number of iterations reached
without convergence")
eval(expr)
}
list(roots = start - adjust, nb.iter = i)
}
runApp("examen-final-h2020")
runApp("examen-final-h2020")
runApp("examen-final-h2020")
runApp("examen-final-h2020")
runApp("examen-final-h2020")
